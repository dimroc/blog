<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>dimroc</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2023-04-19T12:48:42-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Dimitri Roche</name>
   <email></email>
 </author>

 
 <entry>
   <title>Books Worth Reading 2019</title>
   <link href="http://localhost:4000/2019/12/31/books-worth-reading-2019/"/>
   <updated>2019-12-31T05:07:22-08:00</updated>
   <id>http://localhost:4000/2019/12/31/books-worth-reading-2019</id>
   <content type="html">&lt;p&gt;In 2019, nine books made the list, covering idea generation, breadth of skills, and pop-intellectualism:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Origin-Wealth-Remaking-Economics-Business-ebook/dp/B077G7834G/ref=sr_1_1?keywords=the+origin+of+wealth&amp;amp;qid=1577976907&amp;amp;s=digital-text&amp;amp;sr=1-1&quot;&gt;The Origin of Wealth&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Your shirt was not designed; it was evolved.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;A conceptually brilliant, hefty academic book that shows how Darwin’s Theory of Evolution is also applicable to products and the economy.
        &lt;blockquote&gt;
          &lt;p&gt;We are accustomed to thinking of evolution in a biological context, but modern evolutionary theory views evolution as something much more general. Evolution is an algorithm; it is an all-purpose formula for innovation, a formula that, through its special brand of trial and error, creates new designs and solves difficult problems.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Touches on a theme also in Christensen’s “Innovator’s Dilemma”: disruptive versus evolutionary innovations. Times ebb and flow between spurts of divergent ideas, only to see a handful succeed and consolidate in a period of convergence.
        &lt;blockquote&gt;
          &lt;p&gt;This book will argue that wealth creation is the product of a simple, but profoundly powerful, three-step formula—differentiate, select, and amplify—the formula of evolution.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Unfortunately, too heavy a read for most. The world would benefit from a concise Gladwell-ized version of the material. Heavy on economic theory and its comparison to other economic models.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Touches on the deeper meaning of wealth, that’s often overlooked. Wealth is not just about how much money you have, but what your money can buy.&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;But it is not just the absolute level of income that makes New Yorkers so wealthy; it is also the incredible variety of things their wealth can buy. Imagine you had the income of a New Yorker, but you could only spend it on things in the Yanomamö economy. If you spent $36,000 fixing up your mud hut, buying the best clay pots in the village, and eating the finest Yanomamö cuisine, you would be extraordinarily wealthy by Yanomamö standards, but you would still feel far poorer than a typical New Yorker with his or her Nike sneakers, televisions, and vacations in Florida. The number of economic choices the average New Yorker has is staggering. The Wal-Mart near JFK Airport has over 100,000 different items in stock, there are over 200 television channels offered on cable TV, Barnes &amp;amp; Noble lists over 8 million titles, the local supermarket has 275 varieties of breakfast cereal, the typical department store offers 150 types of lipstick, and there are over 50,000 restaurants in New York City alone.&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;Thus, the most dramatic difference between the New Yorker and Yanomamö economies is not their “wealth” measured in dollars, a mere 400-fold difference, but rather the hundred-million-fold, or eight orders of magnitude difference in the complexity and diversity of the New Yorkers’ economy versus the Yanomamö economy.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Range-Generalists-Triumph-Specialized-World-ebook/dp/B07H1ZYWTM/ref=sr_1_1?keywords=range&amp;amp;qid=1577974948&amp;amp;s=digital-text&amp;amp;sr=1-1&quot;&gt;Range&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A fantastic, pop-intellectual book that advocates the long term benefits of a broad skillset; namely &lt;em&gt;creative integration&lt;/em&gt;.
        &lt;blockquote&gt;
          &lt;p&gt;Individual creators started out with lower innovativeness than teams—they were less likely to produce a smash hit—but as their experience broadened they actually surpassed teams: an individual creator who had worked in four or more genres was more innovative than a team whose members had collective experience across the same number of genres. Taylor and Greve suggested that “individuals are capable of more creative integration of diverse experiences than teams are.”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Range shows the diminishing returns of a deep skill set, and how Malcolm Gladwell’s 10k hours is only potent in “kind” learning environments.
        &lt;blockquote&gt;
          &lt;p&gt;Kahneman was focused on the flip side of kind learning environments; Hogarth called them “wicked.” In wicked domains, the rules of the game are often unclear or incomplete, there may or may not be repetitive patterns and they may not be obvious, and feedback is often delayed, inaccurate, or both.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Lateral-Thinking-Creativity-Step-ebook/dp/B003V1WTLI/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=1577971237&amp;amp;sr=1-2&quot;&gt;Lateral Thinking&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;After stumbling on a now favorite blog post about &lt;a href=&quot;https://medium.com/@adamagb/nintendo-s-little-known-product-philosophy-lateral-thinking-with-withered-technology-bac7257d8f4&quot;&gt;Nintendo’s Product Philosophy&lt;/a&gt;, I became
 obsessed with Lateral Thinking. In the blog post, and how it’s often referred to in casual conversation, Lateral Thinking involves taking an idea that’s prevalent in one vertical, and applying it to a new one.
 i.e. The Z thumbstick in the Nintendo 64 controller took the joystick from arcade games and applied it to consoles.
        &lt;blockquote&gt;
          &lt;p&gt;You cannot dig a hole in a different place by digging the same hole deeper. Vertical thinking is used to dig the same hole deeper. Lateral thinking is used to dig a hole in a different place.&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;With vertical thinking one has to be correct at every step, with lateral thinking one does not have to be&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;After further reading, I have come to understand Lateral Thinking as introduced by Edward de Bono.
 Often oversimplified to a brainstorm session, Lateral Thinking is a philosophy and thought process used to shake up existing patterns or assumptions,
 with the goal of coming up with new ones.
        &lt;blockquote&gt;
          &lt;p&gt;Vertical thinking is selective, lateral thinking is generative&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;The purpose of thinking is not to be right but to be effective. Being effective does eventually involve being right but there is a very important difference between the two. Being right means being right all the time. Being effective means being right only at the end.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Simple way to practice? Clever analogies.
        &lt;blockquote&gt;
          &lt;p&gt;Description is certainly the easiest setting in which to practise lateral thinking because there is always some result. [i.e. Sports analogies used to describe business]&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/technique-producing-ideas-simple-formula-ebook/dp/B0145R7R22/ref=sr_1_1?crid=3K7ZPFWKQERHA&amp;amp;keywords=a+technique+for+producing+ideas&amp;amp;qid=1577976266&amp;amp;s=digital-text&amp;amp;sprefix=a+technique+%2Cdigital-text%2C140&amp;amp;sr=1-1&quot;&gt;A Technique for Producing Ideas&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A 46 page book where author James Webb Young reversed-engineered his capacity for ingenuity, so that others could replicate his success.
        &lt;blockquote&gt;
          &lt;p&gt;an idea is nothing more nor less than a new combination of old elements.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Best described by a twist to Steve Job’s quote:
        &lt;blockquote&gt;
          &lt;p&gt;Good artists copy; great artists steal [and add it to something else].&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;I’m always a sucker for a concise &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Elements_of_Style&quot;&gt;“Elements of Style”&lt;/a&gt; type of book.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Mindset-Psychology-Carol-S-Dweck/dp/0345472322/ref=sr_1_3?keywords=mindset&amp;amp;qid=1577970635&amp;amp;sr=8-3&quot;&gt;Mindset&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A fantastic, behavior-changing book advocating the growth mindset, and how to apply it to one’s life.
        &lt;blockquote&gt;
          &lt;p&gt;Benjamin Barber, an eminent political theorist, once said, “I don’t divide the world into the weak and the strong, or the successes and the failures….I divide the world into the learners and nonlearners.”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Breaks down the differences between fixed and growth mindsets, and how we all have both. Illustrates the power of a change in perspective. Focus on the journey of growth, rather than a destination of either success or failure.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Adding ammunition for my battle against the philosophy of the “easy A”, where one drops a real challenge to pad their stats, the author debunks the myth that your IQ is fixed and can’t be improved:
        &lt;blockquote&gt;
          &lt;p&gt;Wasn’t the IQ test meant to summarize children’s unchangeable intelligence? In fact, no. Binet, a Frenchman working in Paris in the early twentieth century, designed this test to identify children who were not profiting from the Paris public schools, so that new educational programs could be designed to get them back on track.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Anti-Intellectualism-American-Life-Richard-Hofstadter-ebook/dp/B006LSVB1M/ref=sr_1_1?crid=7JF2N2XV6UVM&amp;amp;keywords=antiintellectualism+in+american+life&amp;amp;qid=1577972451&amp;amp;s=digital-text&amp;amp;sprefix=antiintellec%2Cdigital-text%2C136&amp;amp;sr=1-1&quot;&gt;Anti-Intellectualism in American Life&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The Sputnik was more than a shock to American national vanity: it brought an immense amount of attention to bear on the consequences of anti-intellectualism in the school system and in American life at large. Suddenly the national distaste for intellect appeared to be not just a disgrace but a hazard to survival.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;Trump’s election and the resulting change in America’s image triggered some personal introspection, which led me to this book. Rest assured, America has seen much of this before. What remains to be seen is how technology will affect it.
        &lt;blockquote&gt;
          &lt;p&gt;Anti-intellectualism was not manifested in this country for the first time during the 1950’s. Our anti-intellectualism is, in fact, older than our national identity, and has a long historical background.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;An incredibly prescient book that shows this populist movement isn’t entirely unique in history, and, like so much of America, is the result of a swinging pendulum, a recurring ebb and flow.
        &lt;blockquote&gt;
          &lt;p&gt;An examination of this background suggests that regard for intellectuals in the United States has not moved steadily downward and has not gone into a sudden, recent decline, but is subject to cyclical fluctuations; it suggests, too, that the resentment from which the intellectual has suffered in our time is a manifestation not of a decline in his position but of his increasing prominence.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;What is intellect? Critical thinking for the sake of critical thinking. Anti-intellectualism should not be misinterpreted as the love by or of idiots, nor should it be conflated with anti-intelligence. Businessmen, advocates of outdated ideas, and champions of pragmatism exercise anti-intellectualism, sometimes correctly so.
        &lt;blockquote&gt;
          &lt;p&gt;Quite the contrary: just as the most effective enemy of the educated man may be the half-educated man, so the leading anti-intellectuals are usually men deeply engaged with ideas, often obsessively engaged with this or that outworn or rejected idea.&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;Intellect, on the other hand, is the critical, creative, and contemplative side of mind. Whereas intelligence seeks to grasp, manipulate, re-order, adjust, intellect examines, ponders, wonders, theorizes, criticizes, imagines. Intelligence will seize the immediate meaning in a situation and evaluate it. Intellect evaluates evaluations, and looks for the meanings of situations as a whole.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;A heavy academic read, that won’t be finished by most who start it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Talking-Strangers-Should-about-People-ebook/dp/B07NDKVWZW/ref=sr_1_1?keywords=talking+to+strangers&amp;amp;qid=1577971943&amp;amp;s=digital-text&amp;amp;sr=1-1&quot;&gt;Talking to Strangers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Another Malcolm Gladwell journey that helps to analyze some of the more modern catastrophes in social judgement, ranging from Sandra Brand to Amanda Knox. Using current events and case studies
 to illustrate a particular facet of global human judgement, he explains our inefficacy at talking to strangers because of three verticals:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;Defaulting to truth.
            &lt;ul&gt;
              &lt;li&gt;Defaulting to skepticism would lead civilization to a standstill. Progress favors trust.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Illusion of Transparency.
            &lt;ul&gt;
              &lt;li&gt;We all think we can read people, but we can’t.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Coupling of thoughts to actions or presumptions.
            &lt;ul&gt;
              &lt;li&gt;In SF and Seattle, suicidal thoughts lead to jumping off a bridge. Will removing the bridge just lead people to find other ways of suicide? Many studies say no.&lt;/li&gt;
              &lt;li&gt;Do we subconsiously couple an image, item, race, religion to an assumption? Like a car with green tree air freshener probably being used by someone who smokes Cannabis?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Unlimited-Memory-Advanced-Strategies-Productive-ebook/dp/B00I3QS1XQ/ref=sr_1_1_sspa?crid=2CIHW7SC36ING&amp;amp;keywords=unlimited+memory&amp;amp;qid=1577973509&amp;amp;s=digital-text&amp;amp;sprefix=unlimited+%2Cdigital-text%2C136&amp;amp;sr=1-1-spons&amp;amp;psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVSjZQVDFZVlRCV0ImZW5jcnlwdGVkSWQ9QTA1MDM0NTMzVTNHSEpTTlowWkFJJmVuY3J5cHRlZEFkSWQ9QTA2NTgzODIzRzhCV01DNUdMMVlMJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&quot;&gt;Unlimited Memory&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Written by an International Grandmaster of Memory, Kevin Horsley walks through techniques for improving your memory.&lt;/li&gt;
      &lt;li&gt;Shows how to leverage your Visual IQ in creative ways, even if what you want to remember is auditory or text.
        &lt;blockquote&gt;
          &lt;p&gt;As neuroscientist John Medina says, “Hear a piece of information and three days later you’ll remember 10% of it. Add a picture and you’ll remember 65%.”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;I’m honestly surprised this wasn’t covered with more emphasis in middle school and highschool. Maybe it was and I ignored it.
        &lt;blockquote&gt;
          &lt;p&gt;“Interest level is measured by how much you remember.” ~ Philip A. Bossert&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://smile.amazon.com/Measure-What-Matters-Google-Foundation-ebook/dp/B078FZ9SYB/ref=sr_1_2?crid=S0IFK8IMA96G&amp;amp;keywords=measure+what+matters&amp;amp;qid=1577974582&amp;amp;s=digital-text&amp;amp;sprefix=measure+what%2Cdigital-text%2C134&amp;amp;sr=1-2&quot;&gt;Measure What Matters&lt;/a&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The practice that molded me at Intel and saved me at Sun—that still inspires me today—is called OKRs. Short for Objectives and Key Results.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;Insightful book about the goal tracking and managerial process used to help align goals horizontally (at different levels of seniority) and vertically (across roles and functions).&lt;/li&gt;
      &lt;li&gt;A mix of case studies and how-tos, John Doerr walks you through implementing your own OKRs in your org.
        &lt;blockquote&gt;
          &lt;p&gt;Many companies have a “rule of seven,” limiting managers to a maximum of seven direct reports. In some cases, Google has flipped the rule to a minimum of seven. (When Jonathan Rosenberg headed Google’s product team, he had as many as twenty.) The higher the ratio of reports, the flatter the org chart—which means less top-down oversight, greater frontline autonomy, and more fertile soil for the next breakthrough. OKRs help make all of these good things possible.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Interesting tidbit on the personalities sought by old school Intel:
        &lt;blockquote&gt;
          &lt;p&gt;At Intel, Andy recruited “aggressive introverts” in his own image, people who solved problems quickly, objectively, systematically, and permanently. Following his lead, they were skilled at confronting a problem without attacking the person. They set politics aside to make faster, sounder, more collective decisions.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Books Worth Reading 2018</title>
   <link href="http://localhost:4000/2018/12/31/books-worth-reading-2018/"/>
   <updated>2018-12-31T06:43:25-08:00</updated>
   <id>http://localhost:4000/2018/12/31/books-worth-reading-2018</id>
   <content type="html">&lt;p&gt;A slow reading year 😞.
Continued to read up on soft skills, but see that slowing down next year. Garbage books don’t make the list.
Prioritized in terms of preference:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/dp/B07HRLQSLG?ref_=k4w_ss_dp_lp&quot;&gt;The Curse of Bigness: Antitrust in the New Gilded Age&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It became apparent, in retrospect, just how much innovation the Bell system monopoly had been holding back. For out of the carcass of AT&amp;amp; T emerged entirely new types of industries unimagined or unimaginable during the reign of AT&amp;amp; T. For example, the liberty to sell things to consumers that plugged into a (new) phone jack not only yielded the answering machine, but the home modulator/ demodulator, or modem, allowing a home computer to speak with a network. That, in turn, made feasible an industry of “online service providers” like AOL or Compuserve, which themselves spawned internet service providers that were accessible from home, producing the Internet revolution.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;Fantastic read on the origins and evolution of Antitrust. Starting from Teddy Roosevelt ‘trustbusting’ in the Second Industrial Revoluion
 to its transformation by the Chicago School to emphasize on consumer prices, resulting in its lack of enforcement in the current Tech trust era.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/dp/B00ICN066A/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;Sapiens&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The Scientific Revolution has not been a revolution of knowledge. It has been above all a revolution of ignorance. The great discovery that launched the Scientific Revolution was the discovery that humans do not know the answers to their most important questions.
 Premodern traditions of knowledge such as Islam, Christianity, Buddhism and Confucianism asserted that everything that is important to know about the world was already known. The great gods, or the one almighty God, or the wise people of the past possessed all-encompassing wisdom, which they revealed to us in scriptures and oral traditions.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;An amazing walk through mankind’s history, showing how different organizational structures helped humans
 coordinate local tribes to a globe of billions. These devices include mercantilism, religion, and ideology, and show the adverse effect it’s had on the world.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Emotional-Intelligence-Matter-More-Than-ebook/dp/B000JMKVCG/ref=sr_1_5?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1546700114&amp;amp;sr=1-5&amp;amp;keywords=emotional+intelligence&quot;&gt;Emotional Intelligence&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Anyone can become angry—that is easy. But to be angry with the right person, to the right degree, at the right time, for the right purpose, and in the right way—that is not easy. - ARISTOTLE, The Nichomachean Ethics&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;The book that trailblazed the term EI (or EQ) walks through in academic detail the different facets of the space that separates itself from IQ, and how to use
 it in every day life.&lt;/li&gt;
      &lt;li&gt;Wish I understood this as a teenager.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Extreme-Ownership-U-S-Navy-SEALs-ebook/dp/B0739PYQSS/ref=sr_1_4?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1546700069&amp;amp;sr=1-4&amp;amp;keywords=extreme+ownership&quot;&gt;Extreme Ownership&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Leaders must own everything in their world. There is no one else to blame [but themself]…
Whether in SEAL training, in combat on distant battlefields, in business, or in life: there are no bad teams, only bad leaders.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;An ideology taken from the special forces and brought to business, documented with conviction
 over a series of case studies alternating from operations in the Iraqi War to scenarios in Corporate America.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Homage-Catalonia-George-Orwell-ebook/dp/B003K16PFU/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1546700172&amp;amp;sr=1-1&amp;amp;keywords=homage+to+catalonia&quot;&gt;Homage to Catalonia&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Beware of my partisanship, my mistakes of fact, and the distortion inevitably caused by my having seen only one corner of events.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;An autobiographical account of George Owell’s time fighting in the Spanish Civil War. Written with a candor that is lost in much of today’s journalism.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/EQ-Applied-Real-World-Emotional-Intelligence-ebook/dp/B07D7K938G/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1546700152&amp;amp;sr=1-1&amp;amp;keywords=eq+applied&quot;&gt;EQ Applied&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The concept of the growth mindset has gained popularity in recent years, partially due to the work of Stanford psychology professor Carol Dweck. In her book Mindset, Dweck advocates that individuals who believe their talents can be developed through hard work, good strategies, and input from others (growth mindset) tend to achieve more than those who believe their talents are innate gifts with finite development potential (fixed mindset).&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;A less pedantic more palatable introduction to emotional intelligence, broken down into four abilities: self-awareness, self-management, social awareness, relationship management.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Concurrency-Go-Tools-Techniques-Developers-ebook/dp/B0742NH2SG/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1546700139&amp;amp;sr=1-1&amp;amp;keywords=concurrency+in+go&quot;&gt;Concurrency In Go, especially chapter 4&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The first is that we do not write parallel code, only concurrent code that we hope will be run in parallel. Once again, parallelism is a property of the runtime of our program, not the code.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;A fantastic read on responsible, error handling concurrent code in the soon to be dominant systems programming language.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Moving AI from the Cloud to the Edge with Crowd Count and Apple's Core ML</title>
   <link href="http://localhost:4000/2018/08/12/counting-crowds-with-coreml/"/>
   <updated>2018-08-12T06:12:27-07:00</updated>
   <id>http://localhost:4000/2018/08/12/counting-crowds-with-coreml</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/images/count/CrowdCountiOS.gif&quot; alt=&quot;iOS Crowd Counting in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After successfully counting crowds in python, &lt;a href=&quot;/2017/11/19/counting-crowds-and-lines/&quot;&gt;which you can read about
here&lt;/a&gt;, I took it upon myself to run the very same models
on the iPhone with Core ML (ML: Machine Learning).
Core ML and MLKit open up a new domain for computing that’s being branded as Edge AI, where neural networks run on a local device (edge) as opposed to the cloud.
The &lt;a href=&quot;https://github.com/dimroc/count/tree/master/ios&quot;&gt;source code for this experiment is available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Transitioning from a fixed camera &lt;a href=&quot;https://count.dimroc.com&quot;&gt;(ShakeCam Madison Square Park)&lt;/a&gt;
to a general purpose iPhone app meant handling a wider variety of input. Are we counting three
people or three thousand people?
In this article, we’ll go over eight facets of the port, from migrating Cloud AI to Edge AI
to handling wildly different inputs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using a two stage ML pipeline to handle different inputs&lt;/li&gt;
  &lt;li&gt;First stage: Building the Crowd Classifier with Create ML&lt;/li&gt;
  &lt;li&gt;Second stage: Different densities, different prediction models: singles, tens, hundreds+&lt;/li&gt;
  &lt;li&gt;Python coremltools to convert Keras to Core ML&lt;/li&gt;
  &lt;li&gt;Why an Xcode Playground for Core ML became a macOS App (Playgrounds are too brittle)&lt;/li&gt;
  &lt;li&gt;Swift Architecture: RxSwift and MVVM&lt;/li&gt;
  &lt;li&gt;Performance: Better than expected&lt;/li&gt;
  &lt;li&gt;Promising Future for Edge AI&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-using-a-two-stage-ml-pipeline-to-handle-different-inputs&quot;&gt;1. Using a two stage ML pipeline to handle different inputs&lt;/h2&gt;

&lt;p&gt;iPhone camera input can vary wildly. Are we counting a selfie or a football stadium?
Our counting model doesn’t handle that type of variety well.
To mitigate this, we tailor make prediction models to accommodate a particular
density, and then use image classification to pick the best strategy.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Crowd Classification -&amp;gt; either singles, tens or hundreds crowd prediction -&amp;gt; count of people
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/CrowdCountStrategies.jpg&quot; alt=&quot;Crowd Count Strategies&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-building-the-crowd-classifier-with-create-ml&quot;&gt;2. Building the Crowd Classifier with Create ML&lt;/h2&gt;

&lt;p&gt;Apple’s new &lt;a href=&quot;https://developer.apple.com/documentation/createml&quot;&gt;Create ML tool&lt;/a&gt;
allows you to build a classifier by simply dragging in a folder.
This was used to classify images as either singles, tens, or hundreds, as a first step
in the ML pipeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/CrowdClassifier.png&quot; alt=&quot;Crowd Classifier&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-different-densities-different-prediction-models-singles-tens-hundreds&quot;&gt;3. Different densities, different prediction models: singles, tens, hundreds+&lt;/h2&gt;

&lt;p&gt;These crowd counting models (from the previous post) are heavily skewed to particular densities. For example,
the model used to count three people, will have a hard time with one thousand people.
They are based on the paper &lt;a href=&quot;https://arxiv.org/pdf/1702.02359.pdf&quot;&gt;Multi-Scale Convolutional Neural Networks for Crowd Counting&lt;/a&gt;.
To mitigate this, we have three models:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/CrowdCountStrategies.jpg&quot; alt=&quot;Crowd Count Strategies&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;singles: Uses Apple’s built in face detection (&lt;a href=&quot;https://developer.apple.com/documentation/vision/vndetectfacerectanglesrequest&quot;&gt;VNDetectFaceRectanglesRequest&lt;/a&gt;). You can beat it by showing the back of your head!&lt;/li&gt;
  &lt;li&gt;tens: Uses the model overtrained for the &lt;a href=&quot;https://count.dimroc.com/&quot;&gt;ShakeCam&lt;/a&gt; in the previous crowd counting post, which has between zero to eighty people. The tens category desparately needs a newly trained model.&lt;/li&gt;
  &lt;li&gt;hundreds: Uses a model built with the &lt;a href=&quot;http://crcv.ucf.edu/data/crowd.php&quot;&gt;UCF Crowd dataset&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be the final step in the two step ML pipeline. These models, however,
are still in the python Keras format. Let’s convert them to Core ML.&lt;/p&gt;

&lt;h2 id=&quot;4-python-coremltools-to-convert-keras-to-core-ml&quot;&gt;4. Python coremltools to convert Keras to Core ML&lt;/h2&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://github.com/apple/coremltools&quot;&gt;coremltools&lt;/a&gt; convert existing
Keras models to Core ML. It worked well with one exception: arbitrarily (not fixed) sized images.&lt;/p&gt;

&lt;p&gt;The top variable sized layer had to be replaced with a fixed size layer to better work
with Core ML. Variable sized input has come to Core ML, but support and documentation still has a way to go.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create a new input layer to replace the (None,None,3) input layer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;675&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Save
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intermediary_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmp/reshaped_model.h5&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_layer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intermediary_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Convert
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coreml_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coremltools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;intermediary_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input_names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;input_1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_input_names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;input_1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;density_map&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;coreml_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CrowdPredictor.mlmodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dimroc/count/blob/master/ml/crowdcount/management/commands/convert_to_coreml.py&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our Core ML pipeline, a crowd classifier feeding into a crowd predictor, let’s
see it in action.&lt;/p&gt;

&lt;h2 id=&quot;5-why-an-xcode-playground-for-core-ml-became-a-macos-app-playgrounds-are-too-brittle&quot;&gt;5. Why an Xcode Playground for Core ML became a macOS App (Playgrounds are too brittle)&lt;/h2&gt;

&lt;p&gt;I was under the impression that the fastest way to a functional prototype was
an Xcode Playground. Inspired by Create ML, the Xcode playground promised to be
a quick and easy prototype for the iOS application.&lt;/p&gt;

&lt;p&gt;When it works, it’s great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/CountPlayground.jpg&quot; alt=&quot;Crowd Playground&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A significant downside to playgrounds however, is its inability to be an Xcode target,
meaning it is unable to have linker and build dependencies. As you use
CocoaPods or Cartography for third party library management, this will break you, and you’ll
end up with spurious errors like the follow:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: Couldn&apos;t lookup symbols:
  type metadata for CrowdCountApiMac.FriendlyClassification
  ...
  __swift_FORCE_LOAD_$_swiftCoreMedia
  __swift_FORCE_LOAD_$_swiftCoreAudio
  CrowdCountApiMac.FriendlyPredictor.DensityMapWidth.unsafeMutableAddressor : Swift.Int
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The good news is that porting over to a macOS application is relativately straighforward, and will fix all of this.
A macOS app is an Xcode target and can therefore link frameworks and binaries, allowing reliable
compilation and linking.&lt;/p&gt;

&lt;h2 id=&quot;6-swift-architecture-rxswift-and-mvvm&quot;&gt;6. Swift Architecture: RxSwift and MVVM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/&quot;&gt;RxSwift&lt;/a&gt; drove out an MVVM (Model-View-ViewModel) architecture,
where Apple’s ViewControllers are the View. So really M(VC)VM.
But these ViewController’s are lean, and merely drive the View or glue the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/MVCVM.jpg&quot; alt=&quot;M(VC)VM&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://medium.com/@daltonclaybrook/rxswift-mvvm-a-little-at-a-time-81ac17dcf285&quot;&gt;many&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@navdeepsingh_2336/creating-an-ios-app-with-mvvm-and-rxswift-in-minutes-b8800633d2e8&quot;&gt;articles&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@dkhuong291/rxswift-with-mvvm-e4af71413298&quot;&gt;on this topic&lt;/a&gt;. Feel free to google for more information.&lt;/p&gt;

&lt;h2 id=&quot;7-performance-better-than-expected&quot;&gt;7. Performance: Better than expected&lt;/h2&gt;

&lt;p&gt;While extracting frames from the camera in real time, classification took ~100ms and crowd counting taking ~3 seconds.
Good to see that iPhone X GPU being put to good use.&lt;/p&gt;

&lt;p&gt;Word of advice: do not do your own image and MLMultiArray manipulation.
Use Apple’s Vision API, such as &lt;a href=&quot;https://developer.apple.com/documentation/vision/vnimagerequesthandler&quot;&gt;VNImageRequestHandler&lt;/a&gt;,
that makes better use of hardware.&lt;/p&gt;

&lt;h2 id=&quot;8-promising-future-for-edge-ai&quot;&gt;8. Promising Future for Edge AI&lt;/h2&gt;

&lt;p&gt;The ability to run sophisticated neural networks, in this case
a multi-column &lt;a href=&quot;https://adeshpande3.github.io/A-Beginner%27s-Guide-To-Understanding-Convolutional-Neural-Networks/&quot;&gt;CNN&lt;/a&gt;,
on your iPhone rather than the cloud, and in real time, is a watershed moment.&lt;/p&gt;

&lt;p&gt;Sure, this already existed in applications like Prisma and Google translate, but the ease of development
will present many more opportunities.&lt;/p&gt;

&lt;p&gt;With millions of iPhones in use, it’ll be easier than ever to crowd source data from
your willing users to improve your model, and create a virtuous cycle that will improve the product:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage -&amp;gt; more data -&amp;gt; improved usage -&amp;gt; more data -&amp;gt; improved usage -&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This proof of concept shows that it’s doable, and that, in and of itself, is a milestone.
Add in the performance and the iPhone’s ubiquity, and we have a promising future.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Books Worth Reading 2017</title>
   <link href="http://localhost:4000/2017/12/30/books-worth-reading-2017/"/>
   <updated>2017-12-30T05:13:24-08:00</updated>
   <id>http://localhost:4000/2017/12/30/books-worth-reading-2017</id>
   <content type="html">&lt;p&gt;Quite the focus on soft skills and nonfiction this year. Garbage books don’t make the list.
Prioritized in terms of preference:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration-ebook/dp/B00FUZQYBO/ref=sr_1_1_twi_kin_1?ie=UTF8&amp;amp;qid=1514640302&amp;amp;sr=8-1&amp;amp;keywords=creativity+inc+by+ed+catmull&quot;&gt;Creativity, Inc.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Getting-Yes-Negotiating-Agreement-Without-ebook/dp/B0051SDM5Q/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640391&amp;amp;sr=1-1&amp;amp;keywords=getting+to+yes&quot;&gt;Getting To Yes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Anything-You-Want-Lessons-Entrepreneur-ebook/dp/B00SI0B5FS/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640410&amp;amp;sr=1-1&amp;amp;keywords=anything+you+want+derek+sivers&quot;&gt;Anything You Want&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Good-They-Cant-Ignore-You-ebook/dp/B0076DDBJ6/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640425&amp;amp;sr=1-1&amp;amp;keywords=so+good+they+can%27t+ignore+you&quot;&gt;So Good They Can’t Ignore You&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Draw-Win-Course-Innovate-Visual-ebook/dp/B01BD1STL6/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640441&amp;amp;sr=1-1&amp;amp;keywords=draw+to+win&quot;&gt;Draw To Win&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Influence-Psychology-Persuasion-Business-Essentials-ebook/dp/B002BD2UUC/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640460&amp;amp;sr=1-1&amp;amp;keywords=influence+the+psychology+of+persuasion&quot;&gt;Influence: The Psychology of Persuasion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Start-Why-Leaders-Inspire-Everyone-ebook/dp/B002Q6XUE4/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640489&amp;amp;sr=1-1&amp;amp;keywords=start+with+why&quot;&gt;Start With Why&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Hacking-Growth-Fastest-Growing-Companies-Breakout-ebook/dp/B01IZTCF6Y/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1514640503&amp;amp;sr=1-1&amp;amp;keywords=hacking+growth&quot;&gt;Hacking Growth&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Counting Crowds and Lines with AI</title>
   <link href="http://localhost:4000/2017/11/19/counting-crowds-and-lines/"/>
   <updated>2017-11-19T14:06:05-08:00</updated>
   <id>http://localhost:4000/2017/11/19/counting-crowds-and-lines</id>
   <content type="html">&lt;video src=&quot;/public/videos/mallcount.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; width=&quot;600px&quot;&gt;&lt;/video&gt;
&lt;p&gt;&lt;em&gt;* Data courtesy of the &lt;a href=&quot;http://personal.ie.cuhk.edu.hk/~ccloy/downloads_mall_dataset.html&quot;&gt;CUHK Mall Dataset&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;* &lt;a href=&quot;/public/images/count/countLandingPage.jpg&quot; target=&quot;_blank&quot;&gt;Screenshot of decommissioned website Count: Quantified imagery SaaS&lt;/a&gt;&lt;/em&gt;
&lt;br /&gt;
&lt;em&gt;* Feel free to check out the &lt;a href=&quot;https://github.com/dimroc/counting_company&quot;&gt;source code&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;* Check out &lt;a href=&quot;/2018/08/12/counting-crowds-with-coreml/&quot;&gt;part 2: counting people on your iPhone with CoreML&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In Union Square, NYC, there’s the always crowded burger spot Shake Shack.
A group of us would obsessively check the &lt;a href=&quot;https://www.shakeshack.com/location/madison-square-park/&quot;&gt;Shake Cam&lt;/a&gt;
around lunch to figure out if a bite was worth the wait.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.shakeshack.com/location/madison-square-park&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/public/images/count/shakecam.jpg&quot; alt=&quot;Shake Cam&quot; width=&quot;200px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;14 person line, not bad&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Rather than do this manually (come on, it’s nearly 2018), it would be great if this could be done
for us. Then, to take that idea further, imagine being able to measure foot traffic on a month to month basis
or to measure the impact of a new promotional campaign.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://count.dimroc.com&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/public/images/count/countLineDualShot.jpg&quot; alt=&quot;Count Alpha&quot; width=&quot;600px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Object detection has received a lot of attention in the deep learning space, but it’s
ill-suited for highly congested scenes like crowds. In this post, I’ll talk about
how I implemented &lt;a href=&quot;https://arxiv.org/pdf/1702.02359.pdf&quot;&gt;multi-scale convolutional neural network (CNN)&lt;/a&gt;
for crowd and line counting.&lt;/p&gt;

&lt;h2 id=&quot;why-not-object-detection&quot;&gt;Why not object detection&lt;/h2&gt;

&lt;p&gt;Regional-CNN’s (R-CNN) use a sliding window to find an object. High density crowds are ill-suited for
sliding windows due to high occlusion:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/rcnnfail.jpg&quot; alt=&quot;R-CNN&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Failed attempt with off the shelf (no retraining) TensorFlow R-CNN&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Further exploration in this approach led me to &lt;a href=&quot;https://github.com/Russell91/TensorBox&quot;&gt;TensorBox&lt;/a&gt;,
but it too had issues with high congestion and large crowd counts.&lt;/p&gt;

&lt;h2 id=&quot;density-maps-to-the-rescue&quot;&gt;Density Maps to the rescue&lt;/h2&gt;

&lt;p&gt;Rather than a sliding window, density maps (aka heat maps) estimate the likelihood of a head
being at a location:
&lt;img src=&quot;/public/images/count/ucfOriginal.jpg&quot; alt=&quot;UCF Original&quot; width=&quot;400px&quot; /&gt;
&lt;img src=&quot;/public/images/count/ucfcrowd.jpg&quot; alt=&quot;Dense Crowd Ground Truth&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;http://crcv.ucf.edu/data/crowd.php&quot; target=&quot;_blank&quot;&gt;&lt;small&gt;
Crowd photo from the UCF Dataset
&lt;/small&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;3406 vs 3408? Pretty close!&lt;/p&gt;

&lt;h3 id=&quot;whats-happening-here&quot;&gt;What’s happening here?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/multiscale-cnn.jpg&quot; alt=&quot;Multi-scale CNN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on &lt;a href=&quot;https://arxiv.org/pdf/1702.02359.pdf&quot;&gt;multi-scale convolutional neural network (CNN) for crowd counting&lt;/a&gt;,
the ground truth is generated by taking the head annotations and setting that pixel value to one, and
then gaussian blurring the image. The model is then trained to output these blurred images, or density maps.
The sum of all the image pixels then results in the crowd count prediction. Read the &lt;a href=&quot;https://arxiv.org/pdf/1702.02359.pdf&quot;&gt;paper&lt;/a&gt; for more insight.&lt;/p&gt;

&lt;p&gt;Let’s look at density maps applied to the shake cam. Don’t worry about the color switch from blue to white for the density maps.
&lt;img src=&quot;/public/images/count/predictionBreakdown.jpg&quot; alt=&quot;Dense Crowd Ground Truth&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;The sum of the pixel values is the size of the crowd&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;As you can see above, we have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The annotated image courtesy of AWS Mechanical Turk.&lt;/li&gt;
  &lt;li&gt;The calculated ground truth by setting head locations to one and then gaussian blurring.&lt;/li&gt;
  &lt;li&gt;The model’s prediction after being trained with ground truths.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-get-the-images&quot;&gt;How to get the images?&lt;/h2&gt;

&lt;p&gt;From your neighborhood &lt;a href=&quot;https://www.shakeshack.com/location/madison-square-park&quot;&gt;Shake Shack Cam&lt;/a&gt; of course.&lt;/p&gt;

&lt;h2 id=&quot;how-to-annotate-the-data&quot;&gt;How to annotate the data?&lt;/h2&gt;

&lt;p&gt;The tried and true AWS Mechanical Turk, with a twist: a mouse click annotates a head as shown below:
&lt;img src=&quot;/public/images/count/headAnnotator.jpg&quot; alt=&quot;Head Annotator&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went ahead and modified the &lt;a href=&quot;https://github.com/kyamagu/bbox-annotator&quot;&gt;bbox-annotator&lt;/a&gt;
to be a single click &lt;a href=&quot;https://github.com/dimroc/head-annotator&quot;&gt;head annotator&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-count-the-line&quot;&gt;How to count the line?&lt;/h2&gt;

&lt;p&gt;Lines aren’t merely people in a certain space, they are people standing next to each other
to form a contiguous collection of people. As of now, I simply feed the density map into a
three layer fully connected (FC) network to output a single number, the line count.&lt;/p&gt;

&lt;p&gt;Gathering data for that also ended up being a task in AWS Mechanical Turk.&lt;/p&gt;

&lt;p&gt;Here are some examples of where lines aren’t immediately obvious:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/lineNotHot.jpg&quot; alt=&quot;Line Not Hot&quot; width=&quot;400px&quot; /&gt;
&lt;img src=&quot;/public/images/count/lineNotHot2.jpg&quot; alt=&quot;Line Not Hot&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;making-a-product-out-of-data-science&quot;&gt;Making a product out of data science&lt;/h2&gt;

&lt;p&gt;This is all good fun working on your development box, but how do you host it? This
will be a topic for another blog post, but the short story is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure it doesn’t look bad! Thanks to the design work done by Steve @ &lt;a href=&quot;http://thoughtmerchants.com/&quot;&gt;thoughtmerchants.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use Vue JS and d3 to visualize the line count.&lt;/li&gt;
  &lt;li&gt;Create a docker image with your static assets and Conda dependencies.&lt;/li&gt;
  &lt;li&gt;Deploy to GCP with kubernetes on Google Container Engine.&lt;/li&gt;
  &lt;li&gt;Periodically run a background job to scrape the shake cam image and run a prediction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/countalpha.jpg&quot; alt=&quot;Count Alpha&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did the extra credit step of having a Rails application interact with the ML service
via &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt;, while integration testing with &lt;a href=&quot;https://github.com/mrkn/pycall.rb&quot;&gt;PyCall&lt;/a&gt;.
Not necessary, but I’m very happy with the setup.&lt;/p&gt;

&lt;h2 id=&quot;unexpected-challenges&quot;&gt;Unexpected Challenges&lt;/h2&gt;

&lt;p&gt;These following challenges have contributed to erroneous line predictions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Umbrellas. Not a head but still a person.&lt;/li&gt;
  &lt;li&gt;Shadows. Around noon there can be some strong shadows resembling people.&lt;/li&gt;
  &lt;li&gt;Winter Darkness. It gets much darker much sooner in November and December. Yet the model was trained predominantly with images of people in daylight.&lt;/li&gt;
  &lt;li&gt;Winter Snow. Training data never had snow, and now we have mistakes like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/count/snownotpeople.jpg&quot; alt=&quot;Count Mistaking Snow&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I discover more of these scenarios, I’ll know what data to gather for a model retraining.&lt;/p&gt;

&lt;h2 id=&quot;check-out-the-site-and-the-source&quot;&gt;Check out &lt;a href=&quot;https://count.dimroc.com&quot;&gt;the site&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dimroc/counting_company&quot;&gt;source&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Feel free to drop a line below if you have any questions.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Multi-scale Convolutional Neural Networks for Crowd Counting
Lingke Zeng, Xiangmin Xu, Bolun Cai, Suo Qiu, Tong Zhang
&lt;a href=&quot;https://arxiv.org/abs/1702.02359&quot;&gt;Page&lt;/a&gt; &lt;a href=&quot;https://arxiv.org/pdf/1702.02359.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fully Convolutional Crowd Counting On Highly Congested Scenes
Mark Marsden, Kevin McGuinness, Suzanne Little and Noel E. O’Connor
&lt;a href=&quot;https://arxiv.org/pdf/1612.00220.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Multi-Source Multi-Scale Counting in Extremely Dense Crowd Images
Haroon Idrees, Imran Saleemi, Cody Seibert, Mubarak Shah
IEEE International Conference on Computer Vision and Pattern Recognition (CVPR), 2013
&lt;a href=&quot;http://crcv.ucf.edu/papers/cvpr2013/Counting_V3o.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;From Semi-Supervised to Transfer Counting of Crowds
C. C. Loy, S. Gong, and T. Xiang
in Proceedings of IEEE International Conference on Computer Vision, pp. 2256-2263, 2013 (ICCV)
&lt;a href=&quot;http://personal.ie.cuhk.edu.hk/~ccloy/files/iccv_2013_crowd.pdf&quot;&gt;PDF&lt;/a&gt; &lt;a href=&quot;http://personal.ie.cuhk.edu.hk/~ccloy/project_semi_counting/index.html&quot;&gt;Project Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Automatic Selfie Segmentation and Style Transfer</title>
   <link href="http://localhost:4000/2017/04/25/machine-learning-selfies/"/>
   <updated>2017-04-25T19:25:38-07:00</updated>
   <id>http://localhost:4000/2017/04/25/machine-learning-selfies</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://xiaoyongshen.me/webpage_portrait/index.html&quot;&gt;&lt;em&gt;Inspired by Automatic Portrait Segmentation for Image Stylization&lt;/em&gt;&lt;/a&gt;
and &lt;em&gt;&lt;a href=&quot;https://github.com/lengstrom/fast-style-transfer&quot;&gt;Fast Style Transfer&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Selfies are dominating photography, so why not experiment in that space? As I ramp up
on machine learning and neural networks, I apply a technique called object segmentation to my face
with mixed results but a promising future. This is all heavily inspired by the paper
&lt;a href=&quot;http://xiaoyongshen.me/webpage_portrait/index.html&quot;&gt;Automatic Portrait Segmentation for Image Stylization by Xiaoyong Shen, et al.&lt;/a&gt;&lt;/p&gt;

&lt;video src=&quot;/public/videos/allFourOutputUdniePhotoshop.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; poster=&quot;/public/images/machine-learning-selfie-segmentation/mlPortraitsAllFour.jpg&quot;&gt;&lt;/video&gt;

&lt;p&gt;Flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extract frames from video&lt;/li&gt;
  &lt;li&gt;Generate matte using &lt;a href=&quot;http://xiaoyongshen.me/webpage_portrait/index.html&quot;&gt;portrait segmentation&lt;/a&gt; on each frame
    &lt;ul&gt;
      &lt;li&gt;Uses pixel level classification between two categories: foreground and background&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lengstrom/fast-style-transfer&quot;&gt;Style transfer&lt;/a&gt; on original frame for cartoon effect&lt;/li&gt;
  &lt;li&gt;Cut out foreground by using the matte as a mask on the styled frame&lt;/li&gt;
  &lt;li&gt;Composite new video by placing foreground over original video&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This road was longer than I thought it would be. The standard neural networks that people are introduced to,
referred to as fully connected layers (FC), don’t suffice with images because it cannot scale up to many pixels.
There are simply too many nodes in the network. Instead, we use the increasingly popular Convolutional Neural Networks
that are particularly good at classifying images. But rather than merely classifying the image as a face,
we want to classify each pixel as either foreground or background.&lt;/p&gt;

&lt;p&gt;For this, we use a &lt;a href=&quot;https://docs.google.com/presentation/d/10XodYojlW-1iurpUsMoAZknQMS36p7lVIfFZ-Z7V_aY/edit#slide=id.g529579d43_1_292&quot;&gt;Fully Convolutional Network&lt;/a&gt;
to perform pixelwise predictions: pixels in, pixels out.&lt;/p&gt;

&lt;h2 id=&quot;convolutional-neural-networks-cnns&quot;&gt;Convolutional Neural Networks (CNNs)&lt;/h2&gt;

&lt;p&gt;Neural Networks for images. These are connected layers of kernels (or filters) to detect
features that a collection of pixels have, such as edges. Imagine a kernel being a 5x5 matrix of values used
to detect image properties at a specific section, or receptive field. For more information, read
these excellent articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/&quot;&gt;Intuitive Explanation of Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cs231n.github.io/convolutional-networks/&quot;&gt;Architecture of Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fully-convolutional-networks&quot;&gt;Fully Convolutional Networks&lt;/h2&gt;

&lt;p&gt;CNNs were predominantly used to classify images. Is it a dog or cat?
Then the problem of object segmentation came, extracting the pixels that make up the dog or cat.
&lt;a href=&quot;https://docs.google.com/presentation/d/10XodYojlW-1iurpUsMoAZknQMS36p7lVIfFZ-Z7V_aY/edit#slide=id.g529579d43_1_292&quot;&gt;Fully Convolutional Network&lt;/a&gt;
solves that problem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xiaoyongshen.me/webpage_portrait/index.html&quot;&gt;Xiaoyong Shen, et al.&lt;/a&gt; fine-tuned the
reference FCN implementation specifically for portraits, and a reimplementation of that is
what you see in this post. It is called the Portrait FCN.&lt;/p&gt;

&lt;h3 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h3&gt;

&lt;p&gt;The matting isn’t perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-selfie-segmentation/matte_140.jpg&quot; alt=&quot;Matte Imperfections&quot; style=&quot;max-width:200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see here, the blotch in the top right is obviously not part of the selfie or the foreground, while the black blotch
in the bottom is part of the foreground.
This is because our Portrait FCN isn’t doing the best job it could, but there are better solutions out there
already, such as &lt;a href=&quot;http://xiaoyongshen.me/webpage_portrait/index.html&quot;&gt;Portrait FCN+&lt;/a&gt; that uses a fixed
portrait trimap to assist the model when generating the matte.&lt;/p&gt;

&lt;p&gt;I plan to take another approach however. More on that in the next experiment.&lt;/p&gt;

&lt;h2 id=&quot;style-transfer&quot;&gt;Style Transfer&lt;/h2&gt;

&lt;p&gt;Once we have the foreground, we use &lt;a href=&quot;https://github.com/lengstrom/fast-style-transfer&quot;&gt;Logan Engstrom’s style transfer&lt;/a&gt; to take the aesthetic from
a painting, like the one shown below, and intelligently apply it to a photo, resulting in a cartoon like effect.
A style reminiscent of &lt;a href=&quot;https://www.youtube.com/watch?v=gpDaNqSXxp0&quot;&gt;Roger Rabbit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-selfie-segmentation/udnie.jpg&quot; alt=&quot;Udnie&quot; style=&quot;max-width:300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xVJwwWQlQ1o&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;/public/images/machine-learning-selfie-segmentation/fox_udnie.gif&quot; alt=&quot;Fox Udnie&quot; style=&quot;max-width:300px&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s an example of style transfer on an entire video before matting:&lt;/p&gt;

&lt;video src=&quot;/public/videos/suit1_scaled.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; style=&quot;max-width: 200px&quot; poster=&quot;/public/images/machine-learning-selfie-segmentation/suit1_scaled.jpg&quot;&gt;
&lt;/video&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;This gave me fantastic exposure to machine learning on media and the world of Convolutional Neural Networks,
I plan to continue experimenting in this space, and even forked over for an external GPU (eGPU):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://egpu.io/external-gpu-buyers-guide-2017/&quot;&gt;eGPU 2017 Comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Up until now, I’ve been using the amazing &lt;a href=&quot;https://www.floydhub.com&quot;&gt;Floyd Hub&lt;/a&gt;, the Heroku for Deep Learning.
Definitely check it out. Even if you have your own hardware, it’s great to have some NVidia K80s at your disposal
to speed up experiements.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>rake ml:learn - AWS Machine Learning through rake</title>
   <link href="http://localhost:4000/2017/04/11/rake-ml-learn-aws-ml-generation-through-rake/"/>
   <updated>2017-04-11T09:07:59-07:00</updated>
   <id>http://localhost:4000/2017/04/11/rake-ml-learn-aws-ml-generation-through-rake</id>
   <content type="html">&lt;p&gt;Automating the creation of your machine learning (ML) model can allow your
services to evolve over time, automatically. This article assumes you have
used the AWS ML Web Interface or have some understanding of AWS ML.&lt;/p&gt;

&lt;p&gt;Ideally, we would have a model that would use Stochastic Gradient Descent
and would learn per query. But when you want a low maintenance solution such
as &lt;a href=&quot;https://aws.amazon.com/machine-learning/&quot;&gt;AWS ML&lt;/a&gt;, that isn’t an option,
since AWS ML models are immutable by design.&lt;/p&gt;

&lt;p&gt;You can, however, retrain a new model and then flip the switch so queries go
to the new endpoint.&lt;/p&gt;

&lt;p&gt;In our setup, achieving this requires a classic Extract, Transform, Load or &lt;strong&gt;ETL&lt;/strong&gt;. This article
will be focusing on that last step &lt;strong&gt;Load&lt;/strong&gt;. And the hardest step in the AWS ML &lt;strong&gt;load&lt;/strong&gt;:
Creating Data Sources.&lt;/p&gt;

&lt;p&gt;Before we talk about &lt;strong&gt;load&lt;/strong&gt; though, let’s set up a simple extract and transform
so we all have contexa and are on the same page.&lt;/p&gt;

&lt;h2 id=&quot;extract&quot;&gt;Extract&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Specific to your business logic&lt;/li&gt;
  &lt;li&gt;Can be skipped in this simple example and fed directly into the transform&lt;/li&gt;
  &lt;li&gt;More complicated examples might require getting data dumps from multiple databases
or other teams&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Machine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Extractor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;extracted_data.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ImportantData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_csv&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;transform&quot;&gt;Transform&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Critical step involves converting your raw data into features to be ingested
by AWS Machine Learning models&lt;/li&gt;
  &lt;li&gt;What those features are depends on your data and your machine learning model,
whether it be simple linear regression or a deep neural network&lt;/li&gt;
  &lt;li&gt;Figuring out features is outside the scope of this article but read &lt;a href=&quot;/2017/04/09/machine-learning-who-gave-you-that-long-id/&quot;&gt;Machine Learning Long Ids&lt;/a&gt;
for some more insight, or better yet, take &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot;&gt;Andrew Ng’s Machine Learning Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Machine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transformer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;extracted_data.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tmp&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;tmp&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AwsMlTransformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tmp/intermediary.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;FeatureExpanderWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tmp/intermediary.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tmp/features.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;load&quot;&gt;Load&lt;/h1&gt;

&lt;p&gt;This is the good stuff. Check out the steps listed in the method below and we’ll
walk through each line.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Machine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loader&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;features.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upload_data_to_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_data_sources&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_model&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_evaluation&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_realtime_endpoint&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of these make use of the AWS SDK v2 for Ruby.&lt;/p&gt;

&lt;h2 id=&quot;upload-data-to-s3&quot;&gt;Upload Data to S3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AWS ML needs access to your S3 bucket
    &lt;ul&gt;
      &lt;li&gt;This can be done with a bash script as explained &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/granting-amazon-ml-permissions-to-read-your-data-from-amazon-s3.html&quot;&gt;on Amazon’s website&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Example below uses &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;awscli&lt;/a&gt;, which can be
installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install awscli&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev.machinelearningservice.dimroc.com&lt;/code&gt; with your bucket&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;#!/bin/bash
echo &amp;quot;Granting AWS ML access to S3 bucket dev.machinelearningservice.dimroc.com...&amp;quot;
aws s3api put-bucket-policy --bucket dev.machinelearningservice.dimroc.com --policy file://ml_bucket_policy.json&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/dimroc/61e1cf2f743a7f5ea0c56bb58dc586d2.js&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Using the AWS Ruby SDK v2, upload the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features.csv&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upload_data_to_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uploading &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to S3...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;bucket: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uploads/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;server_side_encryption: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AES256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-data-sources&quot;&gt;Create Data Sources&lt;/h2&gt;

&lt;p&gt;This is the hardest step in the &lt;strong&gt;load&lt;/strong&gt; stage. If all you read is this section,
you’ll be much better for it.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_data_sources&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating data sources from S3...&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Create Data Source For both Model and Evaluation&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;model_data_source_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;learn-mds-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluation_data_source_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;learn-eds-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Training&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ml_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_data_source_from_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_source_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_data_source_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_source_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Model Source: LearnSample 0-70 &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;compute_statistics: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Required to create ML Model&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_spec: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_location_s3: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_schema: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# More on this below&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_rearrangement: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_rearrangement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wait_for_ml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data_source_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Block until complete&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Evaluation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ml_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_data_source_from_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_source_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluation_data_source_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_source_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Evaluation Source: LearnSample 70-100 &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;compute_statistics: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data_spec: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_location_s3: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_schema: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;data_rearrangement: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_rearrangement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wait_for_ml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data_source_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above performs a few key steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute statistics
    &lt;ul&gt;
      &lt;li&gt;Necessary to train the ML Model as mentioned in the &lt;a href=&quot;http://docs.aws.amazon.com/sdkforruby/api/Aws/MachineLearning/Client.html#create_data_source_from_s3-instance_method&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Rearragement
    &lt;ul&gt;
      &lt;li&gt;Used when you want to split a data source into two using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complement&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complement&lt;/code&gt; tells AWS to split a data source into two, one for training
and one for evaluation. &lt;a href=&quot;http://docs.aws.amazon.com/sdkforruby/api/Aws/MachineLearning/Client.html#create_data_source_from_s3-instance_method&quot;&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;
            &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data_rearrangement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;splitting: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;percentBegin: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;percentEnd: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;strategy: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;random&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;complement: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complement&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/data-rearrangement.html&quot;&gt;More documentation can be found here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Schema
    &lt;ul&gt;
      &lt;li&gt;Describes each csv column with AWS Machine Learning metadata. The example below is for a Multiclass Classification Model&lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rowId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rowWeight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;targetAttributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataFormat&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CSV&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataFileContainsHeader&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CATEGORICAL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NUMERIC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;base_10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NUMERIC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;digit_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NUMERIC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;digit_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NUMERIC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;excludedAttributeNames&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/creating-a-data-schema-for-amazon-ml.html&quot;&gt;More information here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was a lot. Each section warrants a decent write up, so for not, I recommend
reading the high level information about &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/data-rearrangement.html&quot;&gt;data rearrangement&lt;/a&gt;
and &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/creating-a-data-schema-for-amazon-ml.html&quot;&gt;data schema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rest assured though, it’s far simpler from here on out. The rest is really just API
calls using the IDs you just received.&lt;/p&gt;

&lt;h2 id=&quot;create-model-from-data-source&quot;&gt;Create Model From Data Source&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_model&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating model...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ml_model_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;learn-ml-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ml_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_ml_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;ml_model_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_model_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;ml_model_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ML model: LearnSample &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;ml_model_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MULTICLASS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;training_data_source_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_data_source_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;parameters: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;sgd.maxPasses&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;sgd.shuffleType&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;auto&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wait_for_ml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ml_model_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-evaluation&quot;&gt;Create Evaluation&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_evaluation&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating evaluation...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluation_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;learn-ev-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ml_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_evaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;evaluation_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluation_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;evaluation_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Evaluation: LearnSample &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;ml_model_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_model_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;evaluation_data_source_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluation_data_source_id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wait_for_ml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:evaluation_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Generates a &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/multiclass-model-insights.html&quot;&gt;performance visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/Multiclass_Model_Insights_-_Amazon_Machine_Learning.jpg&quot; alt=&quot;F1 Heat Map&quot; style=&quot;max-width:500px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-realtime-endpoint&quot;&gt;Create Realtime Endpoint&lt;/h2&gt;

&lt;p&gt;Expose your service!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_realtime_endpoint&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating realtime endpoint...&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ml_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_realtime_endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ml_model_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_model_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Machine Learning Complete! Update your ENV variables with the following:&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;export AWS_ML_MODEL_ID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_model_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;export AWS_ML_PREDICTION_URL=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;realtime_endpoint_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endpoint_url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;wire-it-all-up-with-rake&quot;&gt;Wire it all up with rake&lt;/h1&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ml&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Transforms raw extracted data into format that&apos;s ingestable by AWS Machine Learning&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Loads pre transformed data into AWS Machine Learning&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Transform and load raw insurance number policy data into AWS Machine Learning&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:learn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In bash or your scheduled job:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake ml:learn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run it weekly to keep your machines learning.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Machine Learning where your long ID comes from</title>
   <link href="http://localhost:4000/2017/04/09/machine-learning-who-gave-you-that-long-id/"/>
   <updated>2017-04-09T16:30:56-07:00</updated>
   <id>http://localhost:4000/2017/04/09/machine-learning-who-gave-you-that-long-id</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This article talks about a solution that involved sensitive information.
As a result, all the names and numbers have been replaced with bogus
information.  The concepts are still relevant and applicable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everyone has an insurance number, and no one knows their actual insurance policy.
Is it car or life insurance? Is it Platinum Shield Standard or Platinum Shield
Plus NY? Bronze or Silver plan?&lt;/p&gt;

&lt;p&gt;A client wanted to know and I was fresh out of my &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot;&gt;Machine Learing Class by
Andrew Ng of Stanford and Coursera&lt;/a&gt;.
But this had to be low maintenance, so mathematical python code was going to be a stretch.
In came &lt;a href=&quot;https://aws.amazon.com/machine-learning/&quot;&gt;AWS Machine Learning&lt;/a&gt; to save the day.&lt;/p&gt;

&lt;h2 id=&quot;why-not-just-use-regex&quot;&gt;Why not just use Regex?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Regex might not exist for that particular provider&lt;/li&gt;
  &lt;li&gt;Cannot learn and improve over time like a machine learning model&lt;/li&gt;
  &lt;li&gt;Still unmanageable working with tens if not hundreds of providers
as opposed to one &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/multiclass-classification.html&quot;&gt;Multiclass Classification Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-do-we-machine-learn-a-string&quot;&gt;How do we machine learn a string?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;WXY5678&lt;/strong&gt; isn’t the greatest thing to plot, so how do you draw a decision
boundary around it?&lt;/p&gt;

&lt;p&gt;I opted to make each digit a dimension, and simply plot that one character in
its own plane. Then rely on the multidimensional power of machine learning
to intuit who the originator was.&lt;/p&gt;

&lt;p&gt;Therefore &lt;strong&gt;WXY5678&lt;/strong&gt; becomes an array of seven features, a seven dimensional vector:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[W,X,Y,5,6,7,8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can’t plot &lt;strong&gt;W&lt;/strong&gt; though can we? Yes we can, by translating [0-9A-Z] to be
a number from 0-35, essentially using our numbers as base 36.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[32,33,34,5,6,7,8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;starting-with-the-first-digit-one-dimension&quot;&gt;Starting with the first digit: one dimension&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/firstDigitTwoPolicies.png&quot; alt=&quot;First Digit - Two&quot; /&gt;
&lt;em&gt;&lt;a href=&quot;https://www.gnu.org/software/octave/&quot;&gt;Octave Plot&lt;/a&gt; of the first digit for two policies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we have plotted the first digit of two policies for one thousand numbers,
and the pattern is obvious. A simple linear regression would yield the following split:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/firstDigitTwoPoliciesLinearRegression.png&quot; alt=&quot;First Digit - Two&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now confidently (&amp;gt;90%) predict the policy just based on the first digit.
We take this concept and extrapolate it in two directions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add more policies, and therefore more classes (different colored dots)&lt;/li&gt;
  &lt;li&gt;Add more digits, and therefore more dimensions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;more-policies-more-classes&quot;&gt;More policies, more classes&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/firstDigitThreePolicies.png&quot; alt=&quot;First Digit - Three&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The yellow bar is actually a third policy, and notice that it’s hardcoded to
one value, resulting in a point cloud so thick, it looks like a line.
Again, we can easily intuit this policy from the others with high confidence,
with just the first digit.&lt;/p&gt;

&lt;p&gt;Will our luck continue as we add more policies?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/firstDigitManyPolicies.png&quot; alt=&quot;First Digit - Many&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above, you’ll see a plot of just eight policies among the hundred we’re trying
to classify. You can see that patterns start falling apart.&lt;/p&gt;

&lt;p&gt;But don’t lose hope. We have many more digits to go, and that’ll help us draw
confident decision boundaries around certain policies. It’ll just be in
20D. Do they have glasses for that?&lt;/p&gt;

&lt;h2 id=&quot;more-digits-more-dimensions&quot;&gt;More digits, more dimensions&lt;/h2&gt;

&lt;p&gt;Imagine 20 features, one per digit, all collaborating to isolate the pattern.&lt;/p&gt;

&lt;p&gt;Visualizing three dimensions can get trippy, so twenty plus is unrealistic.
As such, we place our trust in math and our test set that the combination of
these dimensions will yield confident answers.&lt;/p&gt;

&lt;p&gt;Visualizing such high dimensions involves &lt;a href=&quot;https://en.wikipedia.org/wiki/Dimensionality_reduction&quot;&gt;dimensionality reduction&lt;/a&gt;
and is not something I did for this project.&lt;/p&gt;

&lt;h2 id=&quot;other-features&quot;&gt;Other Features&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/ParachuteInsuranceNumbersExpandedFeatureList.jpg&quot; alt=&quot;Features Spreadsheet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just for good measure, I added the additional features of number length and base 10.
Policy numbers vary in length based on who issued them, so just another
dimension for us to draw decision boundaries for. The base 36 number as
base 10 was an experimented that yielded little return.&lt;/p&gt;

&lt;h2 id=&quot;final-outcome&quot;&gt;Final Outcome&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/PredictionHeatMap.jpg&quot; alt=&quot;Heat Map&quot; /&gt;
&lt;em&gt;AWS Machine Learning Evaluation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Above, you can see ten of the hundred policies plotted in a score matrix.
The blue boxes descending diagonally indicate correct predictions and show
this has been pretty successful. The F1 Score for the first row is 92% while
the accuracy (not shown) is 99.5%. Not bad!&lt;/p&gt;

&lt;p&gt;The two red boxes above might give cause for concern but the mistaken predictions
all belonged to the correct company, just a different plan.
The service is tasked with showing the top three predictions, so the correct
prediction will appear second rather than first, something the service can
live with.&lt;/p&gt;

&lt;h3 id=&quot;policy-predictor&quot;&gt;Policy Predictor&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/machine-learning-ids/Parachute_Policy_Predictor.jpg&quot; alt=&quot;Prediction Searcher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there you have it, machine learned predictions at your fingertips.&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;/2017/04/11/rake-ml-learn-aws-ml-generation-through-rake/&quot;&gt;my post tying this into Rails and Rake for easy model
retraining with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake ml:learn&lt;/code&gt;&lt;/a&gt;.
After that, it’ll be on to TensorFlow.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Video Depth Maps, Zed and NVDA</title>
   <link href="http://localhost:4000/2017/02/03/video-depth-maps/"/>
   <updated>2017-02-03T15:55:29-08:00</updated>
   <id>http://localhost:4000/2017/02/03/video-depth-maps</id>
   <content type="html">&lt;p&gt;My latest experiment has been to generate video depth maps with the goal of splicing in 3D content.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It all starts with a stereo video:&lt;/p&gt;

&lt;video src=&quot;/public/videos/elsegundo-leftright.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; poster=&quot;/public/images/videodepth/leftright.jpg&quot;&gt;&lt;/video&gt;

&lt;p&gt;and after some math, becomes a &lt;strong&gt;left and depth video&lt;/strong&gt;:&lt;/p&gt;

&lt;video src=&quot;/public/videos/elsegundo-leftdepth.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; poster=&quot;/public/images/videodepth/leftdepth.jpg&quot;&gt;&lt;/video&gt;

&lt;p&gt;The whiteness of each pixel in the video to the right dictates how far away that object is from the camera. A completely white pixel is 2 feet away and a gray pixel could be say 10 feet away.&lt;/p&gt;

&lt;p&gt;Here are a few others:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/videodepth/collection.jpg&quot; alt=&quot;Library of Left and Depths&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-is-this-magic-possible&quot;&gt;How is this magic possible?&lt;/h2&gt;

&lt;p&gt;I had a lot of help from the &lt;a href=&quot;https://www.stereolabs.com/&quot;&gt;Zed stereo camera&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ZED_product_main.jpg&quot; alt=&quot;Zed Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They are using &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwj5iNHGlPXRAhUqj1QKHV2ZApwQFggqMAE&amp;amp;url=http%3A%2F%2Fwww.nvidia.com%2Fobject%2Fcuda_home_new.html&amp;amp;usg=AFQjCNFOgRLjdcy04deySQVzAVHfj9Pbiw&amp;amp;sig2=KDG8MuXe2l5WwLJUJNietA&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;Nvidia’s CUDA&lt;/a&gt;
to run GPGPU algorithms against the stereo images to calculate the depth of each pixel.&lt;/p&gt;

&lt;h2 id=&quot;not-always-perfect&quot;&gt;Not Always Perfect&lt;/h2&gt;

&lt;video src=&quot;/public/videos/pier_high_exposure.mp4&quot; controls=&quot;true&quot; type=&quot;video/mp4&quot; poster=&quot;/public/images/videodepth/leftdeptherror.jpg&quot;&gt;&lt;/video&gt;

&lt;p&gt;As you can see in the video above, distance dramatically affects depth perception. The horizon is obviously &lt;strong&gt;not&lt;/strong&gt; the closest thing to the camera.&lt;/p&gt;

&lt;p&gt;The farther away the two lenses are from each other, the farther away it can perceive depth. Inversely, the narrower
the baseline, the closer it can perceive depth. This distance is called the baseline.
The iPhone 7 Plus can only do portrait mode eight feet away because of the baseline length between its dual cameras on such a small form factor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/stereo_depth.jpg&quot; alt=&quot;Baseline Depth Calculation&quot; /&gt;
Read more about it generating depth maps from stereo images &lt;a href=&quot;http://docs.opencv.org/3.2.0/dd/d53/tutorial_py_depthmap.html&quot;&gt;here at OpenCV&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;

&lt;p&gt;This is all extremely relevant in the realm of autonomous vehicles. And that space is on fire. Want to know how far a rock is from a car? Generate a depth map in real time.
And that’s exactly what NVidia’s graphics cards allow you to do. They excel at simple calculations run in parallel across datasets,
which is exactly what neural networks in machine learning do. This general purpose usage of the GPU (GPGPU) has led to video
cards being snatched up by Deep Learning data centers to get an edge in AI.&lt;/p&gt;

&lt;p&gt;The market seems excited by it, take a look at nVidia’s stock price the last year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/nvidia_stock.jpg&quot; alt=&quot;Nvidia Stock&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Books Worth Reading 2015, 2016</title>
   <link href="http://localhost:4000/2016/11/17/changes-your-day-to-day-booklist/"/>
   <updated>2016-11-17T16:08:41-08:00</updated>
   <id>http://localhost:4000/2016/11/17/changes-your-day-to-day-booklist</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Never-Split-Difference-Negotiating-Depended-ebook/dp/B014DUR7L2&quot;&gt;Never split the difference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Crossing-Chasm-3rd-Disruptive-Mainstream-ebook/dp/B00DB3D81G/ref=sr_1_1_ha?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1486170416&amp;amp;sr=1-1&amp;amp;keywords=crossing+the+chasm&quot;&gt;Crossing the Chasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/dp/B002YKOX8Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;Unfolding the Napkin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://smile.amazon.com/Power-Habit-What-Life-Business-ebook/dp/B0055PGUYU/ref=sr_1_1_ha?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1486170470&amp;amp;sr=1-1&amp;amp;keywords=the+power+of+habit&quot;&gt;The Power of Habit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sensible.com/dmmt.html&quot;&gt;Don’t make me think&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiohP2Cj_XRAhVGjVQKHZ7SDcsQFggdMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FInnovators-Dilemma-Revolutionary-Change-Business%2Fdp%2F0062060244&amp;amp;usg=AFQjCNEIyxzX0ZSrnjggDE3ebSZ7CaPIjA&amp;amp;sig2=Psw15PsCyx11rBnMsJvUGg&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;Innovator’s Dilemma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=4&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;sqi=2&amp;amp;ved=0ahUKEwiAiMyPjvXRAhVO1WMKHbm0C1sQFgg1MAM&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FHow-Win-Friends-Influence-People%2Fdp%2F8183220630&amp;amp;usg=AFQjCNH6xyNDp6ubOPJUIoOWOhtF4kXsUA&amp;amp;sig2=mpHQqRXB14sdg2ePsuRESA&amp;amp;bvm=bv.146094739,d.cGc&quot;&gt;How to win friends and influence people&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;sqi=2&amp;amp;ved=0ahUKEwiwmOiXjvXRAhUX2WMKHX-SAkcQFggaMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FNever-Eat-Alone-Expanded-Updated%2Fdp%2F0385346654&amp;amp;usg=AFQjCNH0vtzdALLCqD2DNH9Q7lc4x0DHnQ&amp;amp;sig2=3Tn3Gq2EDPB7l_KXh9lMrg&amp;amp;bvm=bv.146094739,d.cGc&quot;&gt;Never eat alone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiLvK39jvXRAhVls1QKHbOhC14QFggaMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FZero-One-Notes-Startups-Future%2Fdp%2F0804139296&amp;amp;usg=AFQjCNGBysSIB5wiWeQYRRxFa55mcVidNg&amp;amp;sig2=Vdn0VIhRrBBYMXDZUD56IA&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;Zero to One&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiGm6Okj_XRAhXJqFQKHeznCA8QFggaMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FHard-Thing-About-Things-Building%2Fdp%2F0062273205&amp;amp;usg=AFQjCNGAu-AtEJavtjqv_IXlGfihQk0E_g&amp;amp;sig2=XjajmByLrQuJcZTF42IiQg&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;The Hard Thing About Hard Things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwis0t6qj_XRAhWjslQKHXEUDE8QFggaMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FLiars-Poker-Norton-Paperback-Michael%2Fdp%2F039333869X&amp;amp;usg=AFQjCNHcXHwh6ChBGkZYI_8sYdyJ7xTzdA&amp;amp;sig2=3rgzIAdXOsBavZz8zecFKg&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;Liar’s Poker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwj3u-Wyj_XRAhVhjVQKHcedCS8QFggaMAA&amp;amp;url=https%3A%2F%2Fwww.amazon.com%2FWriting-10th-Anniversary-Memoir-Craft%2Fdp%2F1439156816&amp;amp;usg=AFQjCNH0e-rpB55glCv5EzKX-NwqP4P0eA&amp;amp;sig2=aGhfQR8wrW7zAz1hqnpQOg&amp;amp;bvm=bv.146094739,d.cGw&quot;&gt;On Writing: Stephen King&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.barnesandnoble.com/w/the-elements-of-style-william-strunk/1116794279?ean=9780205309023&amp;amp;pcta=n&amp;amp;st=PLA&amp;amp;sid=BNB_DRS_Core+Shopping+Textbooks_00000000&amp;amp;2sid=Google_&amp;amp;sourceId=PLGoP164&amp;amp;k_clickid=3x164&quot;&gt;The Elements of Style: Strunk and White&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Twitter API to beat the (Wall) Street</title>
   <link href="http://localhost:4000/2016/02/28/using-apis-to-beat-wallstreet-estimates/"/>
   <updated>2016-02-28T09:23:53-08:00</updated>
   <id>http://localhost:4000/2016/02/28/using-apis-to-beat-wallstreet-estimates</id>
   <content type="html">&lt;p&gt;I made a killer trade the other day. And it came from a buy signal on a side project. It showed me that Instagram was cannibalizing Twitter image traffic over time. Let me walk you through it.&lt;/p&gt;

&lt;h2 id=&quot;tweet-farmer&quot;&gt;Tweet Farmer&lt;/h2&gt;

&lt;p&gt;I’ve been farming tweets from cities for years now. They’ve spun out into experimental projects like &lt;a href=&quot;/2015/12/29/search-across-cities/&quot;&gt;Urban Events&lt;/a&gt; and
&lt;a href=&quot;/2014/09/24/tweets-as-pixels/&quot;&gt;New Tweet City&lt;/a&gt;. When investigating Twitter media, it became apparent that many tweets
were actually links to Instagram (IG).&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/HunterEliteGene&quot;&gt;@HunterEliteGene&lt;/a&gt; And your favorite level?&lt;/p&gt;&amp;mdash; Minibar Austin (@MinibarAustin) &lt;a href=&quot;https://twitter.com/MinibarAustin/status/703329275970244611&quot;&gt;February 26, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;In JSON&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;id&quot;: 703309386622615600,
  &quot;text&quot;: &quot;I captured every level of drunk last night 📷🍺 @ 6th Street, Austin, TX https://t.co/ZEspPWrfPR&quot;,
  &quot;source&quot;: &quot;&amp;lt;a href=\&quot;http://instagram.com\&quot; rel=\&quot;nofollow\&quot;&amp;gt;Instagram&amp;lt;/a&amp;gt;&quot;,
  &quot;entities&quot;: {
    &quot;urls&quot;: [{
        &quot;url&quot;: &quot;https://t.co/ZEspPWrfPR&quot;,
        &quot;display_url&quot;: &quot;instagram.com/p/BCQx8Z3gNiC/&quot; //Important!
      }]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tweet, despite being all text, has a URL and contains media at the end of the tunnel. So I grabbed the Instagram image
and reclassified the tweet as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image&lt;/code&gt; in my system:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/public/images/twitterbeatdastreet/LevelOfDrunk.jpg&quot; alt=&quot;Level Of Drunk&quot; width=&quot;200px&quot; style=&quot;display:inline-block;&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;id&quot;:&quot;703309386622615553&quot;,
  &quot;mediaType&quot;:&quot;image&quot;, *Important*
  &quot;mediaUrl&quot;:&quot;https://scontent.cdninstagram.com/t51.2885-15/s640x640/sh0.08/e35/12724735_1711188682429506_1029304848_n.jpg?ig_cache_key=MTE5MzY3MzU1NjQ3NTU2NjIxMA%3D%3D.2.l&quot;, //instagram
  &quot;text&quot;:&quot;I captured every level of drunk last night 📷🍺...&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-many-images-were-actually-instagram&quot;&gt;How many Images were actually Instagram?&lt;/h2&gt;

&lt;p&gt;I had to know. Fortunately, all my tweets lived in &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt;, which has a data visualization
tool called &lt;a href=&quot;https://www.elastic.co/products/kibana&quot;&gt;Kibana&lt;/a&gt;.
I charted the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;media&lt;/code&gt; tweets that were actually Instagram links per city.
Let’s start with a look at New York City below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/TwitterNycImagesStacked.jpg&quot; alt=&quot;Twitter NYC Stacked&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Man, that’s a lot of Instagram. Let’s check it out as a percentage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/TwitterNycMediaSplit.jpg&quot; alt=&quot;Twitter NYC Percentage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Peaked at 92%! So here’s where I give you the disclaimer about which tweets I’m analyzing.
&lt;strong&gt;This is only applicable to geotagged tweets with media.&lt;/strong&gt; After all, if it’s not geotagged I can’t tell if it’s coming out of NYC.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some other cities:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/TwitterMediaOriginSplitsStacked.jpg&quot; alt=&quot;Twitter Cities Percentage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shout out to LA for &lt;strong&gt;only having 64% of traffic from Instagram&lt;/strong&gt;. So on Twitter’s best day, it only had 36% of images on
its own platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/Bruh.jpeg&quot; width=&quot;300px&quot; alt=&quot;Bruh&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-did-wall-street-come-in&quot;&gt;How did Wall Street come in?&lt;/h2&gt;

&lt;p&gt;I’ve been getting fleeced by the &lt;a href=&quot;https://www.google.com/finance?q=TWTR&amp;amp;ei=rxbTVvGnLNaNmAGo2q64Ag&quot;&gt;TWTR&lt;/a&gt; stock for a while now, &lt;strong&gt;even while having this knowledge months ago.&lt;/strong&gt;
I knew of this in the Summer of 2015, &lt;strong&gt;when TWTR was $51 (it’s now $17)&lt;/strong&gt;, and did nothing. I was reluctant to use the Twitter API as a buy or sell signal
on the stock. My finance world and my development world were completely distinct. And then this happened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/VennEpiphany.jpg&quot; alt=&quot;Venn Epiphany&quot; style=&quot;max-width: 400px; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems obvious now, but I never went into my side projects to discover signals. Looking at the information, the perfect trade
would have been a pair trade shorting TWTR and buying FB (owner of Instagram). But I felt I had missed the boat on TWTR. I actually hadn’t,
but I’ve been burned by bottom fishing before and I wasn’t going to do that again. Not me, no sir.&lt;/p&gt;

&lt;p&gt;Then in January, I landed on this &lt;a href=&quot;http://blog.business.instagram.com/post/128686033016/150909-advertisinglaunch&quot;&gt;nugget of information about Instagram&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’re excited to announce that starting this month, advertisers both large and small can run campaigns on Instagram. In addition, ads are now available in more than 30 new countries—including Italy, Spain, Mexico, India and South Korea—and will be launching in markets around the world on Sept. 30.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;September 30th 2015. This means that &lt;a href=&quot;http://investor.fb.com/releasedetail.cfm?ReleaseID=952040&quot;&gt;FB Q4 Earnings&lt;/a&gt;, released in January, would be the first earnings release with IG ad revenue for a full quarter.
My, my are the stars aligning! Couple this with some napkin math on their estimates (&lt;strong&gt;translation&lt;/strong&gt;: pure speculation), I was going in for the buy.&lt;/p&gt;

&lt;h2 id=&quot;buying-options-for-leverage&quot;&gt;Buying options for leverage&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/FBOptionConfirmation.jpg&quot; alt=&quot;Facebook Options Confirmation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s not a game anymore. The options had a strike price of $99 and cost me just under $900 (that’s all I risked, I know, don’t tell me about it).&lt;/p&gt;

&lt;p&gt;When the market bell closed on the 28th, &lt;a href=&quot;https://www.google.com/finance?q=NASDAQ%3AFB&amp;amp;ei=shbTVuHoJpazmAGNw5HQBQ&quot;&gt;FB&lt;/a&gt; stock dipped to $94.50. GG y’all, 🍻, this was fun.&lt;/p&gt;

&lt;p&gt;And then earnings were released. It spiked up to as high as $112. I waited until the next morning and I was out of there:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/twitterbeatdastreet/FacebookCallOptionsBOOM.jpg&quot; alt=&quot;Facebook Call Options BOOM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exercising 300 FB shares became $32,748, I got my first margin call and needed to shore up some cash. I just dumped the shares
and took home a profit of around $3k, just over 300% of the initial ~$900.&lt;/p&gt;

&lt;h2 id=&quot;dont-forget-the-context&quot;&gt;Don’t forget the context!&lt;/h2&gt;

&lt;p&gt;Remembering the context of all this is important. Before 2016, Twitter’s outlook wasn’t so bleak. In December 2014, a Twitter exec threw this &lt;a href=&quot;http://fortune.com/2014/12/11/twitter-evan-williams-instagram/&quot;&gt;jab&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Twitter co-founder Evan Williams: ‘I don’t give a shit’ if Instagram has more users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now add a finding that claims a majority of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image&lt;/code&gt; traffic belongs to your rival. Perhaps they’ll say Twitter has
always been about the 140 character tweet. After pushing &lt;a href=&quot;http://money.cnn.com/2015/10/06/technology/twitter-moments/&quot;&gt;Moments&lt;/a&gt;, unlikely.&lt;/p&gt;

&lt;h2 id=&quot;all-of-that-for-only-3k&quot;&gt;All of that for only $3K&lt;/h2&gt;

&lt;p&gt;It was by far the surest I had ever been that a stock would pop on earnings, and I was timid. I needed some Wolf of Wall Street that day
and I didn’t have it. But you always say that after a successful trade. It was a great experience and I’m hoping that the stars
will align again, but I’ve accepted that it might not happen for months, quarters, or even years.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Not Quite Utopia: Golang and isomorphic React</title>
   <link href="http://localhost:4000/2016/02/05/not-quite-utopia-golang-isomorphic-react/"/>
   <updated>2016-02-05T17:58:56-08:00</updated>
   <id>http://localhost:4000/2016/02/05/not-quite-utopia-golang-isomorphic-react</id>
   <content type="html">&lt;p&gt;Below are the notes taken when developing my first Golang + React JS application:
&lt;a href=&quot;http://urbanevents.dimroc.com/?q=tattoos&quot;&gt;Cross City Search&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Productivity just isn’t there&lt;/li&gt;
  &lt;li&gt;Boilerplate takes forever
    &lt;ul&gt;
      &lt;li&gt;Both the golang and react ecosystems are in flux.&lt;/li&gt;
      &lt;li&gt;What’s best practice this year will be abandonware next year.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Client siding routing with react-router is extremely time consuming
    &lt;ul&gt;
      &lt;li&gt;Gets even harder when you add redux, but redux-simple-router helps&lt;/li&gt;
      &lt;li&gt;Difficulty bumps up another level when you run into bugs rendering js server side.&lt;/li&gt;
      &lt;li&gt;Good luck debugging javascript rendered in duktape on golang.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Isomorphic javascript starts off great, falls apart when half the client libraries you need require the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt; object
    &lt;ul&gt;
      &lt;li&gt;Bye bye bootstrap and a lot of other loved css frameworks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I love css modules and the ability to scope your styles.&lt;/li&gt;
  &lt;li&gt;On the flipside, I have mixed feelings about coupling everything in a component together: view, style, and logic live in the component/my-component folder.&lt;/li&gt;
  &lt;li&gt;Build configurations became pretty sophisticated despite Golang’s amazing compiler
    &lt;ul&gt;
      &lt;li&gt;Used fancy cross compilation to prepare binaries for docker.&lt;/li&gt;
      &lt;li&gt;Had to roll that back for part of the app (cityweb) because we had native dependencies (go-duktape)&lt;/li&gt;
      &lt;li&gt;Webpack, the client side pipeline, was quiet a chore to set up, although there was a learning curve there.&lt;/li&gt;
      &lt;li&gt;Ended up using make files to create one liners to build go, build the docker image, and then push created image.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My top goal is to be productive, even if it’s at the cost of peformance.
Golang and React JS is about as fast as it gets, but they lack the tooling and the frameworks
needed to make them competive in the realms of productivity.&lt;/p&gt;

&lt;p&gt;My next project will be using the PEEP stack: Postgres, Elixir, Ember, Phoenix.
I hope this stack will hit the sweet spot of performance and productivity.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails and Angular without the SPA</title>
   <link href="http://localhost:4000/2016/01/23/rails-and-angular-without-the-spa/"/>
   <updated>2016-01-23T16:15:02-08:00</updated>
   <id>http://localhost:4000/2016/01/23/rails-and-angular-without-the-spa</id>
   <content type="html">&lt;p&gt;A full on Angular single page application (SPA) is overkill 90% of the time.
This article will illustrate a simple way to get the rich user experience from
javascript while still relying on Rails server rendering for the bulk of the application.&lt;/p&gt;

&lt;p&gt;Our approach advocates the following philosophy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Javascript and angular functionality exists to enrich the user experience of existing server-side rendered pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is based on the premise that only a handful of pages actually
need javascript functionality. Most of your pages are happily being rendered server side,
but there’s that one page that needs sophisticated user experience (UX). For example, you might have
a master-detail page, and want AJAX requests to fill the detail without navigating to a new page.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-angular-with-rails&quot;&gt;Setting up Angular with Rails&lt;/h2&gt;

&lt;p&gt;I recommend using &lt;a href=&quot;https://github.com/rharriso/bower-rails&quot;&gt;bower-rails&lt;/a&gt; to manage client side dependencies like Angular.
You will need to install bower, please go to &lt;a href=&quot;https://github.com/rharriso/bower-rails&quot;&gt;bower-rails&lt;/a&gt; for more details if unfamiliar.&lt;/p&gt;

&lt;h4 id=&quot;bowerfile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bowerfile&lt;/code&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# A sample Bowerfile&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Check out https://github.com/42dev/bower-rails#ruby-dsl-configuration for more options&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;angular&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;~&amp;gt; 1.4.8&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pull down the client side dependencies&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rake bower:install bower:clean&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;then-add-js-files-to-applicationjs&quot;&gt;Then add .js files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.js&lt;/code&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//= require angular/angular&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup is done.&lt;/p&gt;

&lt;h3 id=&quot;working-with-turbolinks&quot;&gt;Working With Turbolinks&lt;/h3&gt;

&lt;p&gt;If you’re using Turbolinks (you should), you’ll need to bootstrap
the angular application on every Turbolinks page load.&lt;/p&gt;

&lt;p&gt;I recommend creating an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initializer.js&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// On turbolinks load:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready page:load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This callback will bootstrap angular on every turbolinks page navigation.&lt;/p&gt;

&lt;h2 id=&quot;angular-directives-and-controllers&quot;&gt;Angular Directives and Controllers&lt;/h2&gt;

&lt;p&gt;With all our setup done, we can now add Angular functionality to our pages.&lt;/p&gt;

&lt;p&gt;There are two main ways to do this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Angular Controllers
    &lt;ul&gt;
      &lt;li&gt;Useful when adding page specific functionality&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Angular Directives
    &lt;ul&gt;
      &lt;li&gt;Useful when creating reusable widgets, such as a HTML 5 video player, that can be reused across pages.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;angular-controllers&quot;&gt;Angular Controllers&lt;/h2&gt;

&lt;p&gt;Angular let’s you tag DOM elements with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng-controller&lt;/code&gt; to associate javascript functionality with
a particular page. The key word below being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserCountsChartCtrl&lt;/code&gt;:&lt;/p&gt;

&lt;h4 id=&quot;usersindexhamlhtml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users/index.haml.html&lt;/code&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.graphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng-controller&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UserCountsChartCtrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.hidden.graph-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;data: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;graph-data&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@weekly_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.row&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.col-md-12&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;%canvas&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.chart.chart-bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;data: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barGraph.data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;labels: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barGraph.labels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;series: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barGraph.series&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barGraph.options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;javacsriptsngcontrollersusercountschartctrljs&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javacsripts/ng/controllers/UserCountsChartCtrl.js&lt;/code&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;UserCountsChartCtrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// bar graph&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;barGraph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;User Counts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;responsive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maintainAspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I am drawing bar charts on the index page using &lt;a href=&quot;http://www.chartjs.org/&quot;&gt;Charts.js&lt;/a&gt; with an Angular Controller.&lt;/p&gt;

&lt;h3 id=&quot;passing-data-from-server-side-to-client-side&quot;&gt;Passing data from server side to client side&lt;/h3&gt;
&lt;p&gt;One often needs to get information to the javascript client. In a typical SPA, this
is done with a subsequent AJAX call. Here we save that AJAX call and just render the information
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; HTML attributes. Notice the lines below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.graphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ng-controller&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UserCountsChartCtrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.hidden.graph-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;data: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;graph-data&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@weekly_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  ....&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;javacsriptsngcontrollersusercountschartctrljs-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javacsripts/ng/controllers/UserCountsChartCtrl.js&lt;/code&gt;&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;UserCountsChartCtrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pull data&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This allows you to leverage Rails (controllers, presenters, etc) to present the data needed by the javascript client side.&lt;/p&gt;

&lt;h2 id=&quot;angular-directives&quot;&gt;Angular Directives&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;Angular Directives&lt;/a&gt; allow you to create
javascript functionality that is cross cutting. The example below is ensures that
a form can only be submitted once, to stop those pesky double click submissions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltSingleSubmit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;input[type=&apos;submit&apos;]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can now be easily used in any form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_form_for&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;html: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lt-single-submit&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Save&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;relying-on-server-side-rendering&quot;&gt;Relying on Server Side Rendering&lt;/h3&gt;

&lt;p&gt;When making hybrid applications like this, it’s easy to get server side
and client side rendering jumbled together. I advocate always using server side rendering.
Sure it’s less flashy, but it’s more productive and consolidates your validations into one place.&lt;/p&gt;

&lt;p&gt;I’ve done this many ways. We’ll start with the simplest: Angular $http GETs.&lt;/p&gt;

&lt;h3 id=&quot;ajax-with-angular-http&quot;&gt;AJAX with Angular $http&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;MarketingShowCtrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;turbosafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;turbosafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.cta&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Get the path for the GET form the data attribute.&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Angular Scope has method fetchCollection used by ng-click.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Start Turbolinks progress bar even though we&apos;re using Angular!&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;turbosafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collectionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}).&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newDom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Replace DOM element with Server Side rendered HTML.&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#top&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newDom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;turbosafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Unable to retrieve collection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;turbosafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Next Collection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ng-click&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;fetchCollection(&quot;$50&quot;, &quot;Next&quot;)&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ajax-with-remote-forms&quot;&gt;AJAX with Remote Forms&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ltApp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AccessTokenCtrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Handle remote forms success.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ajax:success&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#access_token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.panel-body&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.row&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.col-md-12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ng-controller&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AccessTokenCtrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;%h3&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.col-header&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;#access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;live_access_token&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Notice the remote: true to show Rails remote forms.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_access_token_account_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mode: :live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;remote: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:button&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;%span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.glyphicon.glyphicon-refresh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;You’re right, I got carried away at the end. But now you have an exhaustive set of examples
that show how a sprinkle of Angular can breathe rich interactivity into your Rails rendered pages.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Machine Learning NYC Neighborhoods</title>
   <link href="http://localhost:4000/2016/01/13/machine-learning-neighborhoods/"/>
   <updated>2016-01-13T07:15:46-08:00</updated>
   <id>http://localhost:4000/2016/01/13/machine-learning-neighborhoods</id>
   <content type="html">&lt;p&gt;Check out the &lt;a href=&quot;http://machinelearninghoods.dimroc.com&quot;&gt;NYC Neighborhood Predictor&lt;/a&gt;!
&lt;img src=&quot;/public/images/FlyingToCoachellaPrediction.jpg&quot; alt=&quot;Prediction Matrix&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&quot;https://aws.amazon.com/machine-learning/&quot;&gt;AWS Machine Learning&lt;/a&gt; to predict
which neighborhood a string of text originates from.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Uses a simple &lt;a href=&quot;http://www.phoenixframework.org/&quot;&gt;Elixir and Phoenix&lt;/a&gt; Web app to expose an
AWS Machine Learning &lt;a href=&quot;http://docs.aws.amazon.com/machine-learning/latest/dg/requesting-real-time-predictions.html&quot;&gt;Real-Time Endpoint&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dimroc/machine_learning_hoods&quot;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-learning-what&quot;&gt;Machine Learning What?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using a dataset of ~1G of geo-tagged tweets, we create a CSV with two columns: text and neighborhood.&lt;/li&gt;
  &lt;li&gt;After training and evaluating a machine learning (ML) model with this data, we expose the real-time endpoint via this elixir application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Molding the training data to create a better model is the real challenge here.&lt;/li&gt;
  &lt;li&gt;Does my data even have statistical correlations or is it just noise?&lt;/li&gt;
  &lt;li&gt;Iterate, iterate, and iterate again on the model and evaluation data is what needs to be done here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-schema&quot;&gt;Input Schema&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;targetAttributeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Neighborhood&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataFormat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CSV&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataFileContainsHeader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEXT&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Neighborhood&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributeType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CATEGORICAL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;excludedAttributeNames&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/PredictionMatrix.jpg&quot; alt=&quot;Prediction Matrix&quot; /&gt;
&lt;img src=&quot;/public/images/NeighborhoodCategories.jpg&quot; alt=&quot;Neighborhood Categories&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>tutum exec to replace heroku run</title>
   <link href="http://localhost:4000/2016/01/10/tutum-cli-to-exec-docker/"/>
   <updated>2016-01-10T10:56:40-08:00</updated>
   <id>http://localhost:4000/2016/01/10/tutum-cli-to-exec-docker</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku run rails console&lt;/code&gt; is an amazing commandline utility enabling one to run a REPL loop on their production server.&lt;/p&gt;

&lt;p&gt;Docker comes with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt; command that allows you to ssh into a running container much like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku run&lt;/code&gt; command.
But doing this on a remotely running docker container can be a hassle.&lt;/p&gt;

&lt;p&gt;This is now much easier via docker with tutum. See this example with elixir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/tutumExec.jpg&quot; alt=&quot;Tutum Exec&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tutum to Coordinate Docker</title>
   <link href="http://localhost:4000/2016/01/01/tutum-to-coordinate-docker-images/"/>
   <updated>2016-01-01T08:31:52-08:00</updated>
   <id>http://localhost:4000/2016/01/01/tutum-to-coordinate-docker-images</id>
   <content type="html">&lt;p&gt;I’ve been using &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt; to manage my docker containers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/ServiceDashboardTutum.jpg&quot; alt=&quot;Service Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They use &lt;a href=&quot;https://github.com/weaveworks/weave&quot;&gt;Weave&lt;/a&gt;
under the hood so your containers can link across nodes invisibly.&lt;/p&gt;

&lt;p&gt;They also have great monitoring:
&lt;img src=&quot;/public/images/NewTweetCityTutumNodeCPUOver.jpg&quot; alt=&quot;Docker Monitoring&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Urban Events: Compare NYC media against LA and other cities</title>
   <link href="http://localhost:4000/2015/12/29/search-across-cities/"/>
   <updated>2015-12-29T15:52:35-08:00</updated>
   <id>http://localhost:4000/2015/12/29/search-across-cities</id>
   <content type="html">&lt;p&gt;Just released &lt;a href=&quot;http://urbanevents.dimroc.com/?q=tattoos&quot;&gt;Urban Events&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://urbanevents.dimroc.com/?q=tattoos&quot;&gt;&lt;img src=&quot;/public/images/UrbanEvents.jpg&quot; alt=&quot;Urban Events&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This experiment allows one to search for media across cities and neighborhoods.&lt;/li&gt;
  &lt;li&gt;The technology used was Golang, React JS, Webpack, Elasticsearch, and Docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;high-level-services&quot;&gt;High Level Services&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;City Recorder&lt;/strong&gt;: Classifies tweets from Twitter’s &lt;a href=&quot;https://dev.twitter.com/streaming/reference/post/statuses/filter&quot;&gt;Public Streaming API&lt;/a&gt;
with a neighborhood by running Elasticsearch (ES) Geospatial percolations against an index of
&lt;a href=&quot;https://github.com/dimroc/neighborhoods&quot;&gt;city neighborhood GeoJSON files&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;City Web&lt;/strong&gt;: Searches across cities using Elasticsearch’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top_hits&lt;/code&gt; metric aggregator and displays results in React JS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Currently listening to NYC, London, Paris, Austin, Miami, and Los Angeles.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/dimroc/urbanevents&quot;&gt;github page&lt;/a&gt; for technical details and source code.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Boilerplate for the best of Go and React</title>
   <link href="http://localhost:4000/2015/11/22/go-starter-kit-with-webpack-hmr/"/>
   <updated>2015-11-22T07:35:14-08:00</updated>
   <id>http://localhost:4000/2015/11/22/go-starter-kit-with-webpack-hmr</id>
   <content type="html">&lt;p&gt;Want in on the killer combo of Golang with React? Check out the &lt;a href=&quot;https://github.com/olebedev/go-starter-kit&quot;&gt;go-starter-kit&lt;/a&gt;.
It’s a little rough around the edges, but once you get clean up that Makefile you’ll have the following goodness:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/hot-module-replacement.html&quot;&gt;Hot Module Replace&lt;/a&gt;: &lt;em&gt;It’s like live reload for every module.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Isomorphic React with &lt;a href=&quot;https://github.com/olebedev/go-duktape&quot;&gt;go-duktape&lt;/a&gt;: Render HTML server side the first time, then client side every subsequent request.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rackt.org/redux/&quot;&gt;Redux&lt;/a&gt;: An evolution of the &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux design pattern&lt;/a&gt; that’s since been simplified for reloadability and development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;Webpack dev server&lt;/a&gt; to hot reload while coding ala live reload off http://localhost:5001&lt;/li&gt;
  &lt;li&gt;One terminal window process for all development!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I did have to patch up the Makefile to support my usage of the &lt;a href=&quot;https://golang.org/doc/code.html#PackagePaths&quot;&gt;recommended package paths&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ie: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$GOPATH/src/github.com/user/your_app&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;makefile&quot;&gt;Makefile&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;BIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;GOPATH&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/bin
&lt;span class=&quot;nv&quot;&gt;NODE_BIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;shell npm bin&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; .pid
&lt;span class=&quot;nv&quot;&gt;GO_FILES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;filter-out app/server/bindata.go, &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;shell find app &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app/server/bindata.go
&lt;span class=&quot;nv&quot;&gt;BINDATA_FLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;server &lt;span class=&quot;nt&quot;&gt;-prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;app/server/data
&lt;span class=&quot;nv&quot;&gt;BUNDLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app/server/data/static/build/bundle.js
&lt;span class=&quot;nv&quot;&gt;APP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;shell find app/client &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GO_APP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; github.com/dimroc/urbanevents/cityweb/app &lt;span class=&quot;c&quot;&gt;# Addition: Introduced GO_APP path&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean $(BIN)/app&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; app/server/data/static/build/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; app/server/data/bundle.server.js
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;BINDATA&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;cleaned

&lt;span class=&quot;nl&quot;&gt;$(BUNDLE)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(APP)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@$(&lt;/span&gt;NODE_BIN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/webpack &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--colors&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;$(BIN)/app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(BUNDLE) $(BINDATA)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;GO_APP&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Swapped in GO_APP instead of app&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean $(BUNDLE)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;make restart
	&lt;span class=&quot;p&quot;&gt;@$(&lt;/span&gt;NODE_BIN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/webpack-dev-server &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; webpack.hot.config.js &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;_wds &amp;amp;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ANYBAR_WEBPACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yep &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;NODE_BIN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/webpack &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--colors&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--watch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;_wp &amp;amp;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;fswatch &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;GO_FILES&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; make restart &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;_wp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;_wds&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BINDATA_FLAGS += -debug&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(BINDATA)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;GO_APP&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Swapped in GO_APP instead of app&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@$(&lt;/span&gt;BIN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/app run &amp;amp; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;PID&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;$(BINDATA)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;BIN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;/go-bindata &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;BINDATA_FLAGS&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; app/server/data/...

&lt;span class=&quot;nl&quot;&gt;lint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;eslint app/client &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;golint &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;filter-out app/main.go, &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;GO_FILES&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;golint &lt;span class=&quot;nt&quot;&gt;-min_confidence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>ETL Language Showdown Part 3</title>
   <link href="http://localhost:4000/2015/11/14/etl-language-showdown-pt3/"/>
   <updated>2015-11-14T06:52:19-08:00</updated>
   <id>http://localhost:4000/2015/11/14/etl-language-showdown-pt3</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This article is a continuation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;Extract-Transform-Load (ETL)&lt;/a&gt; showdown series.
Check these posts out for additional context and check out the &lt;a href=&quot;https://github.com/dimroc/etl-language-comparison&quot;&gt;repo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;Comparing Golang, Scala, Elixir and Ruby for ETL&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;/2015/05/07/etl-language-showdown-pt2&quot;&gt;Comparing Golang, Scala, Elixir, Ruby, and now Python3 for ETL: Part 2&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Analyses and discussions done in this ETL series have led to the following language pull requests:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/erlang/otp/pull/771&quot;&gt;Add BIF binary:split/2,3 to Erlang&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/golang/go/issues/13288&quot;&gt;Improve case insensitive regex in Golang&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;In this post, we will compare a Map Reduce solution to count the number of times &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knicks&lt;/code&gt;
is mentioned in ~40M tweets spanning multiple files. This originally came about as a way to compare vanilla
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_interpreter_lock&quot;&gt;GIL-bound&lt;/a&gt; Ruby implementations against Scala
and Golang. It has since evolved into a &lt;a href=&quot;https://github.com/dimroc/etl-language-comparison&quot;&gt;repo of idiomatic ETL solutions&lt;/a&gt;
for a variety of languages (ten at the time of this writing).&lt;/p&gt;

&lt;h3 id=&quot;langauges-covered&quot;&gt;Langauges Covered&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt; &lt;th&gt;Language&lt;/th&gt;&lt;th&gt;Owner&lt;/th&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/golang&quot;&gt;Golang&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/scala&quot;&gt;Scala&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/nim&quot;&gt;Nim&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/nodejs&quot;&gt;Node&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/php&quot;&gt;PHP&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/erlang&quot;&gt;Erlang&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/potatosalad&quot;&gt;potatosalad&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/elixir&quot;&gt;Elixir&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/josevalim&quot;&gt;josevalim&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/rust&quot;&gt;Rust&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/potatosalad&quot;&gt;potatosalad&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/python&quot;&gt;Python&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/csharp&quot;&gt;C#&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/mganss&quot;&gt;mganss&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/shell&quot;&gt;shell&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/mganss&quot;&gt;mganss&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/perl&quot;&gt;perl&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/sitaramc&quot;&gt;sitaramc&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Hype up your language by improving the current implementation. Give me a shout by &lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/issues&quot;&gt;raising an issue&lt;/a&gt; to become an owner.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;shortcuts-led-to-apple-and-orange-comparisons&quot;&gt;Shortcuts led to apple and orange comparisons&lt;/h2&gt;

&lt;p&gt;During this adventure, my Golang solution wasn’t as performant as I had hoped because the regex
library couldn’t compete with Scala’s. As a result, I introduced the first apple to orange comparison by allowing Golang to use substrings.&lt;/p&gt;

&lt;p&gt;One can’t help but find the fastest solution possible, and this story continued with other languages and pull requests.
Reference implementations were accompanied with optimized solutions taking shortcuts, and I couldn’t turn away such sweet code.&lt;/p&gt;

&lt;p&gt;Even when sticking to the reference solution, it has becoming increasingly difficult to keep the implementations consistent across languages
because certain idioms sway solutions in different directions.&lt;/p&gt;

&lt;h3 id=&quot;examples-of-shortcuts&quot;&gt;Examples of shortcuts&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;PHP takes a shortcut by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stripos&lt;/code&gt; that only works on ASCII, not Unicode.&lt;/li&gt;
  &lt;li&gt;Regex comparison as opposed to substring checks.&lt;/li&gt;
  &lt;li&gt;Loading file contents into memory as opposed to streaming.&lt;/li&gt;
  &lt;li&gt;Having the master or supervisor keep track of the results so there is effectively no reduction step.&lt;/li&gt;
  &lt;li&gt;Leveraging binary pattern matching as opposed to regular regex.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are the previous implementations described in &lt;a href=&quot;/2015/05/07/etl-language-showdown-pt2/&quot;&gt;part 2 of the ETL showdown&lt;/a&gt;:&lt;/p&gt;

&lt;div height=&quot;800px&quot;&gt;
  &lt;canvas id=&quot;languageChart&quot;&gt;&lt;/canvas&gt;
&lt;/div&gt;

&lt;h1 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h1&gt;

&lt;p&gt;The results have a healthy amount of variety. Going into &lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;part 1&lt;/a&gt;, it was believed that
the results of multi-threaded approaches would be the same because the problem would be IO bound. Well, that was wrong.
Instead of using this as a speed comparison across languages, use this repo as a reference for writing idiomatic ETL solutions in the language of your choice.
&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison&quot;&gt;Check out the repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to promote consistency across implementations, I’ve introduced the following:&lt;/p&gt;

&lt;h3 id=&quot;rules-of-reference-implementation&quot;&gt;Rules of Reference Implementation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Stream input from files.&lt;/li&gt;
  &lt;li&gt;Use Regular Expressions to check for the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knicks&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Have multiple mappers, but one reducer.&lt;/li&gt;
  &lt;li&gt;Each individual worker holds its results in a hash and sends that final hash back for reduction.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;new-school-language-additions&quot;&gt;New School: Language Additions&lt;/h3&gt;

&lt;div height=&quot;800px&quot;&gt;
  &lt;canvas id=&quot;languageChart2&quot;&gt;&lt;/canvas&gt;
&lt;/div&gt;

&lt;h2 id=&quot;new-school-observations-and-shortcuts&quot;&gt;New School Observations and Shortcuts&lt;/h2&gt;

&lt;p&gt;We’ve since added even more languages, each with their own nuances.
&lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; is a newcomer I’ve never heard of but it performed surprisingly well.
Below you’ll find some notes on each implementation.&lt;/p&gt;

&lt;h3 id=&quot;erlang&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/erlang&quot;&gt;Erlang&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Leverages &lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/binaryhandling.html&quot;&gt;Binary Pattern Matching&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Holds all data in memory as opposed to streaming input line by line.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nim&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/nim&quot;&gt;Nim&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Implementation seems identical to the ruby version (streaming input with regex but using multiple cores) and it is blazing fast. The first I’ve heard of &lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;rust&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/rust&quot;&gt;Rust&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Regex solution is identical to reference implementation.&lt;/li&gt;
  &lt;li&gt;Substring solution only deals with ASCII.&lt;/li&gt;
  &lt;li&gt;Man is it fast. Would love someone to take another look at the Rust implementation to see how it might be taking shortcuts against the reference implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;php&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/php&quot;&gt;PHP&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Only doing substring checks against ASCII.&lt;/li&gt;
  &lt;li&gt;Single threaded.&lt;/li&gt;
  &lt;li&gt;Included just to grow the library of implementations. Improvements and pull requests are welcome.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;node-js&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/master/nodejs&quot;&gt;Node JS&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Uses &lt;a href=&quot;https://nodejs.org/api/cluster.html&quot;&gt;cluster&lt;/a&gt; to get around the &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_interpreter_lock&quot;&gt;Global Interpreter Lock (GIL)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The workers communicate a match to the cluster master, effectively skipping the reduction step.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call To Action&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The number of languages being covered has grown past my ability to maintain. If you would like to &lt;strong&gt;own&lt;/strong&gt; a particular language’s implementation,
please let me know and feel free to submit PR’s my way.&lt;/li&gt;
  &lt;li&gt;Another area of interest is memory consumption. Tracking memory consumption can be tricky.
For example, runtimes can aggresssively grab memory despite the application not using all of it. It would
be great to track peak memory usage for the runs, so that we can now plot memory consumption along with execution time.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
(function() {
    var options = {
      maintainAspectRatio: true,
      responsive: true
    };

    var results = {
      &quot;ruby&quot;: 31.426,
      &quot;ruby-parallel&quot;: 7.602,
      &quot;jruby&quot;: 12.915,
      &quot;elixir&quot;: 10.959,
      &quot;go-substring&quot;: 6.040,
      &quot;go-regex&quot;: 18.637,
      &quot;python3-pool&quot;: 7.331,
      &quot;scala-akka&quot;: 8,
      &quot;scala-parallel&quot;: 8.5,
      &quot;scala-future&quot;: 8.5,
    };

    var results2 = {
      &quot;ruby&quot;: 31.426,
      &quot;nim&quot;: 2.813,
      &quot;nodejs-cluster&quot;: 2.582,
      &quot;php-ascii-single-thread&quot;: 10.901,
      &quot;erlang-unsafe-cheats&quot;: 2.589,
      &quot;erlang-binary&quot;: 4.081,
      &quot;erlang-regex&quot;: 5.874,
      &quot;rust-substring&quot;: 1.960,
      &quot;rust-regex&quot;: 1.382
    };

    function createBarChart(results, canvasId) {
      var data = {
          labels: $.map(results, function(key, element) { return element }),
          datasets: [ { data: $.map(results, function(key, element) { return key }) } ]
      };

      var ctx = document.getElementById(canvasId).getContext(&quot;2d&quot;);
      var myBarChart = new Chart(ctx).Bar(data, options);
    }

    createBarChart(results, &quot;languageChart&quot;);
    createBarChart(results2, &quot;languageChart2&quot;);

})();
&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Cross Compiled Go with Alpine Linux make a tiny Docker image</title>
   <link href="http://localhost:4000/2015/08/20/cross-compiled-go-with-docker/"/>
   <updated>2015-08-20T07:46:35-07:00</updated>
   <id>http://localhost:4000/2015/08/20/cross-compiled-go-with-docker</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update: Docker has since released &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;Multi-stage builds&lt;/a&gt;
to address the problem described below. It’s a far better solution, and you can consider the below article deprecated.
Check it out!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Golang’s ability to create a self-contained executable makes deployment a breeze.
You just copy the single file. No need to worry about versioned dependencies and your dependencies’ dependencies.&lt;/p&gt;

&lt;p&gt;Golang’s compiler goes ever further by supporting &lt;a href=&quot;http://stackoverflow.com/questions/12168873/cross-compile-go-on-osx&quot;&gt;cross compilation&lt;/a&gt;.
Know your target architecture?
Compile directly for it from your dev box. Linux example below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;go &lt;span class=&quot;nt&quot;&gt;--with-cc-common&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Installs go with cross compilation support&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;amd64 go build &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; someexecutable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Couple this with a minimalist docker image, such as &lt;a href=&quot;https://github.com/gliderlabs/docker-alpine&quot;&gt;alpine&lt;/a&gt;, and you have yourself a tiny 40MB image.&lt;/p&gt;

&lt;h4 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM alpine:3.2
ADD someexecutable /go/bin/someexecutable
ENTRYPOINT /go/bin/someexecutable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes you’ll need an extra thing or two, like CA certificates to connect to HTTPS with SSL:&lt;/p&gt;

&lt;h4 id=&quot;dockerfile-1&quot;&gt;Dockerfile&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM alpine:3.2
RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; ca-certificates &lt;span class=&quot;c&quot;&gt;# Certificates for SSL&lt;/span&gt;
ADD tmp/someexecutable /go/bin/someexecutable
ENTRYPOINT /go/bin/someexecutable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Compare this to my original 500MB image built from the &lt;a href=&quot;https://github.com/docker-library/golang&quot;&gt;golang base image&lt;/a&gt;:&lt;/p&gt;

&lt;h4 id=&quot;dockerfile-2&quot;&gt;Dockerfile&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Start from a Debian image with the latest version of Go installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and a workspace (GOPATH) configured at /go.&lt;/span&gt;
FROM golang &lt;span class=&quot;c&quot;&gt;# This line alone will put you at about 300MB.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the local package files to the container&apos;s workspace.&lt;/span&gt;
ADD &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /go/src/github.com/dimroc/urbanevents/cityservice

&lt;span class=&quot;c&quot;&gt;# Build the outyet command inside the container.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (You may fetch or manage dependencies here,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# either manually or with a tool like &quot;godep&quot;.)&lt;/span&gt;

WORKDIR /go/src/github.com/dimroc/urbanevents/cityservice

RUN wget https://raw.githubusercontent.com/pote/gpm/v1.3.2/bin/gpm &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x gpm &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;gpm /usr/local/bin &lt;span class=&quot;c&quot;&gt;# GPM&lt;/span&gt;

RUN gpm
RUN go &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;github.com/dimroc/urbanevents/cityservice/cityrecorder
WORKDIR /go/src/github.com/dimroc/urbanevents/cityservice/cityrecorder
ENTRYPOINT /go/bin/cityrecorder&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the new minimalist Dockerfile, pushing incremental changes only sends
a trivial 11MB and the image is now a reasonable 40MB. A far cry from the hundred MB sized docker
images floating around.&lt;/p&gt;

&lt;p&gt;Cross Compiled Go + Alpine Linux + Docker = Win&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Where Tech Companies Fall in the Purchase Funnel</title>
   <link href="http://localhost:4000/2015/08/19/where-tech-companies-fall-in-the-marketing-funnel/"/>
   <updated>2015-08-19T07:47:54-07:00</updated>
   <id>http://localhost:4000/2015/08/19/where-tech-companies-fall-in-the-marketing-funnel</id>
   <content type="html">&lt;p&gt;I’m talking to a bunch of sales guys and they start to mention how
the big boys in tech (google search, facebook, yahoo, youtube, twitter, etc) all control varying
amounts of marketing dollars in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Purchase_funnel&quot;&gt;Purchase Funnel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The what?&lt;/p&gt;

&lt;p&gt;You know, AIDA:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/aida-funnel1.gif&quot; alt=&quot;AIDA Marketing Funnel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dropped right after &lt;strong&gt;ABC&lt;/strong&gt; (Always Be Closing) in
&lt;a href=&quot;http://www.imdb.com/title/tt0104348/&quot;&gt;Glengarry Glen Ross&lt;/a&gt;, AIDA is a very popular acronym used in marketing to describe to Purchase Funnel.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SOrsThlgGxc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;wikipedia&quot;&gt;Wikipedia:&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The purchase funnel, or purchasing funnel, is a consumer focused marketing model which
illustrates the theoretical customer journey towards the purchase of a product or service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All companies go &lt;strong&gt;across the funnel&lt;/strong&gt; to some
degree. But from a consumer perspective, some have more sway than others.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eg. “Generic search” on Google (searching for “vacation ideas”) is upper funnel and in
the &lt;strong&gt;awareness/interest&lt;/strong&gt; stage. While a search term that is showing intent to purchase, eg. “netflix coupon code”, is at the bottom in &lt;strong&gt;action&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve gone ahead and placed the tech companies where I think they have the most mind share
for that particular stage of the funnel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/aida-companies.jpg&quot; alt=&quot;AIDA Companies&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ad-exchange-works-across-all-parts&quot;&gt;Ad Exchange works across all parts&lt;/h3&gt;

&lt;p&gt;FB &amp;amp; Google both have their own “Ad Exchange” platforms that run all the way up from upper funnel brand to lower funnel, algorithmic, “direct response” ad solutions.&lt;/p&gt;

&lt;h3 id=&quot;personal-takeaways&quot;&gt;Personal Takeaways&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Social Media raises Awareness.&lt;/li&gt;
  &lt;li&gt;I don’t know what to do about Interest.&lt;/li&gt;
  &lt;li&gt;Search shows desire.&lt;/li&gt;
  &lt;li&gt;Action is usually the marketplace that allows a purchase to happen. Although, I’m being told this is where Google Search is positioned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apparently, there is a simplified model that collapses Interest into Desire, and is called &lt;strong&gt;CAB&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cognition (Awareness or learning)&lt;/li&gt;
  &lt;li&gt;Affect (Feeling, interest or desire)&lt;/li&gt;
  &lt;li&gt;Behavior (Action)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But we’re going to stick with the classic.&lt;/p&gt;

&lt;h3 id=&quot;still-to-do&quot;&gt;Still to do&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Retention Loop: We’ll save this for another post.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Charting Tweets with Kibana 4 and CloudWatch</title>
   <link href="http://localhost:4000/2015/08/03/visualizing-tweets-with-kibana-4/"/>
   <updated>2015-08-03T04:43:55-07:00</updated>
   <id>http://localhost:4000/2015/08/03/visualizing-tweets-with-kibana-4</id>
   <content type="html">&lt;p&gt;A lot of people have a lot of data in their Elasticsearch clusters. We have all the geotagged tweets
coming out of cities for the past few months. Extracting any additional insight is a big win,
and this is where &lt;a href=&quot;https://www.elastic.co/products/kibana&quot;&gt;Kibana&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/KibanaForTweets.png&quot; alt=&quot;Kibana For Tweets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My city tweets are pretty noisy at the moment. I’ll check back in when I’ve sliced out something meaningful.&lt;/p&gt;

&lt;p&gt;In the mean-time, I’ve been tracking the tweet frequency of certain cities via Amazon’s &lt;a href=&quot;http://aws.amazon.com/cloudwatch/&quot;&gt;CloudWatch&lt;/a&gt;.
Mostly so &lt;a href=&quot;http://aws.amazon.com/sns/&quot;&gt;SNS&lt;/a&gt; can send me a text when things go quiet, but it makes for a decent time-series chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/CloudWatchForTweets.png&quot; alt=&quot;CloudWatch For Tweets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Three takeaways here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The day night cycles present an obvious pattern, although it never truly goes quiet.&lt;/li&gt;
  &lt;li&gt;NYC and LA have a dramatically higher volume than the other cities, which makes sense given their size.&lt;/li&gt;
  &lt;li&gt;Parisians have better things to do than tweet.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Experimenting with Twitter Data in CartoDB</title>
   <link href="http://localhost:4000/2015/05/16/experimenting-with-cartodb/"/>
   <updated>2015-05-16T04:04:50-07:00</updated>
   <id>http://localhost:4000/2015/05/16/experimenting-with-cartodb</id>
   <content type="html">&lt;p&gt;Lately, I’ve been experimenting with a variety of mapping solutions. Starting with the barebones Leaflet (amazing), and then taking things a step
further with CartoDB. I’ve got all these tweets lying around from &lt;a href=&quot;http://www.newtweetcity.com&quot;&gt;New Tweet City&lt;/a&gt;, so I figured I would put them to good use.&lt;/p&gt;

&lt;p&gt;I was just in California, and people were all about &lt;a href=&quot;http://www.coachella.com&quot;&gt;Coachella&lt;/a&gt;.
On my return home I asked myself, “Which NYC neighborhoods actually care about Coachella?” I made the intensity map below to answer this question:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;520&quot; frameborder=&quot;0&quot; src=&quot;https://dimroc.cartodb.com/viz/d2c4ff4e-fc9b-11e4-8e56-0e018d66dc29/embed_map&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; oallowfullscreen=&quot;&quot; msallowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The neighborhoods of FiDi and TriBeCa took that crown, to no surprise. They are some of the most affluent neighborhoods in NYC and I can see those residents hyping up Coachella.
Meanwhile, Washington Heights and northern Manhattan had little if any activity.&lt;/p&gt;

&lt;p&gt;Below, you can clearly see how interest in &lt;a href=&quot;http://www.coachella.com&quot;&gt;Coachella&lt;/a&gt; spikes in the month of April, when the event occurs:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;520&quot; frameborder=&quot;0&quot; src=&quot;https://dimroc.cartodb.com/viz/4acec984-fc9c-11e4-a15a-0e0c41326911/embed_map&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; oallowfullscreen=&quot;&quot; msallowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Over the next few months, I’ll be plotting some more NYC data to glean insight into particular neighborhoods.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Comparing Golang, Scala, Elixir, Ruby, and now Python3 for ETL: Part 2</title>
   <link href="http://localhost:4000/2015/05/07/etl-language-showdown-pt2/"/>
   <updated>2015-05-07T09:13:39-07:00</updated>
   <id>http://localhost:4000/2015/05/07/etl-language-showdown-pt2</id>
   <content type="html">&lt;p&gt;A year ago, I wrote the same program in four languages to compare their productivity when performing &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL (extract-transform-load)&lt;/a&gt;.
Read about &lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;part 1 here&lt;/a&gt; and feel free to check out the &lt;a href=&quot;https://github.com/dimroc/etl-language-comparison&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code has changed, the languages have evolved, and the hardware now includes a SSD drive. So, where are they now?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: There is now also a &lt;a href=&quot;/2015/11/14/etl-language-showdown-pt3/&quot;&gt;part 3&lt;/a&gt;&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Ruby w/ Celluloid (Global Interpreter Lock Bound, single core)&lt;/td&gt;
    &lt;td&gt;43.7s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;JRuby w/ Celluloid&lt;/td&gt;
    &lt;td&gt;15.8s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Ruby w/ &lt;a href=&quot;https://github.com/grosser/parallel&quot; target=&quot;_blank&quot;&gt;grosser/parallel&lt;/a&gt; (&lt;b&gt;not GNU Parallel&lt;/b&gt;)&lt;/td&gt;
    &lt;td&gt;10.9s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Python w/ &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot; target=&quot;_blank&quot;&gt;Pool&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;12.7s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Scala&lt;/td&gt;
    &lt;td&gt;8.8s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Scala w/ Substring &lt;b&gt;(Skipped regex for performance analysis)&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;8.3s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Golang&lt;/td&gt;
    &lt;td&gt;32.8s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Golang w/ Substring &lt;b&gt;(Skipped regex for performance analysis)&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;7.8s&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;Elixir&lt;/td&gt;
    &lt;td&gt;21.8s&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;/h2&gt;

&lt;p&gt;The original goal was &lt;strong&gt;not&lt;/strong&gt; to see how fast each language could go. Rather, it was was to measure the length of time needed to
write a solution and subjectively measure the maintainability of said solution, all while learning each language’s gotchas on the way.
But, in the end, everyone wants benchmarks.&lt;/p&gt;

&lt;p&gt;It was assumed that runtimes would all be approximately the same, since this should have been an IO-bound problem. So why
care about the speed of the language? Well, on my old MacBook Pro with a 5200 RPM HDD, this was not true and, surprisingly, it still isn’t on my SSD.&lt;/p&gt;

&lt;h2 id=&quot;the-hardware&quot;&gt;The Hardware&lt;/h2&gt;

&lt;p&gt;MacBook Pro 2.3GHz i7 (quad core) with 16GB RAM and SSD&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We have ~40M tweets spanning multiple files, with each tweet tagged with their New York City neighborhood. We want to discover which
neighborhoods care the most about the New York Knicks by searching for the term &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knicks&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;questions-and-concerns-from-part-1&quot;&gt;Questions and Concerns from &lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;Part 1&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Why was I writing to an intermediary file? Why didn’t I do it all in memory? Well, now I do.&lt;/p&gt;

    &lt;p&gt;This comparison was derived from a larger ETL process that spanned multiple computers and therefore
 used intermediary files to pass along the information. This cookie-cutter experiment has no need for this,
 so it has been removed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why am I using regex and not a simple string search (GoLang’s regex sucks in 1.x.x)?&lt;/p&gt;

    &lt;p&gt;The implementations should be consistent across all languages for a fair comparison. Even though
 the problem is simply searching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knicks&lt;/code&gt;, I wanted the implementations to have the flexibility
 to perform more powerful searches. That being said, Golang’s Regexp package performs dramatically worse than other languages
 so I included results using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings.Contains&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Scala, why did I use Akka instead of the lighter Parallel Collections?&lt;/p&gt;

    &lt;p&gt;Because I love Akka.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;implementation-changes&quot;&gt;Implementation Changes&lt;/h2&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby version is now 2.2.2.&lt;/li&gt;
  &lt;li&gt;No longer uses GNU Parallel, but instead uses &lt;a href=&quot;https://github.com/grosser/parallel&quot;&gt;grosser/parallel&lt;/a&gt; to span multiple cores.&lt;/li&gt;
  &lt;li&gt;Implementation no longer writes to intermediary file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala&quot;&gt;Scala&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Upgraded to Scala 2.11.5 and Akka 2.3.10.&lt;/li&gt;
  &lt;li&gt;Reduction no longer writes to intermediary file.&lt;/li&gt;
  &lt;li&gt;Still uses Akka. If you think the &lt;a href=&quot;http://docs.scala-lang.org/overviews/parallel-collections/overview.html&quot;&gt;Parallel Collections&lt;/a&gt; library would be a better fit,
which it very well might be, please feel free to contribute a pull request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Version python3-3.4.3&lt;/li&gt;
  &lt;li&gt;A new Python implementation has been added for comparison’s sake.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pool&lt;/code&gt; object&lt;/a&gt; allows one to run the program on multiple processes and sidestep the Global Interpreter Lock (GIL).
  A pretty great alternative to my use of &lt;a href=&quot;http://www.gnu.org/software/parallel/&quot;&gt;GNU &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt;&lt;/a&gt; with Ruby in &lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;part 1&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elixir&quot;&gt;Elixir&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Updated to Elixir version 1.0.4&lt;/li&gt;
  &lt;li&gt;Reduction no longer writes to intermediary file.&lt;/li&gt;
  &lt;li&gt;Actor model is beautiful in Elixir.&lt;/li&gt;
  &lt;li&gt;No significant performance improvement when using String.contains instead of regex.&lt;/li&gt;
  &lt;li&gt;Profiled with &lt;a href=&quot;https://github.com/parroty/exprof&quot;&gt;exprof&lt;/a&gt; but didn’t see any low hanging fruit (I’m welcome to any feedback here).
  &lt;img src=&quot;/public/images/etlElixirProfiling.jpg&quot; alt=&quot;Elixir Profiling&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Changing&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;no&quot;&gt;HashDict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;made a dramatic difference. It speaks to the youth of the Elixir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elixir-lang.org/getting-started/maps-and-dicts.html#maps&quot;&gt;From the website:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Maps were recently introduced into the Erlang VM with EEP 43. Erlang 17 provides a partial implementation of the EEP, where only “small maps” are supported. This means maps have good performance characteristics only when storing at maximum a couple of dozens keys. To fill in this gap, Elixir also provides the HashDict module which uses a hashing algorithm to provide a dictionary that supports hundreds of thousands keys with good performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;golang&quot;&gt;Golang&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Updated Golang to 1.4.2.&lt;/li&gt;
  &lt;li&gt;Initial performance was a disappointing 30s+, so I dug in and used &lt;a href=&quot;http://blog.golang.org/profiling-go-programs&quot;&gt;pprof&lt;/a&gt; to profile the code.
  &lt;img src=&quot;/public/images/etlGolangRegexp.jpg&quot; alt=&quot;Golang Profiling&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Go’s Regular Expression engine really is as slow as a previous commenter mentioned. Switching to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings.Contains&lt;/code&gt; took it to ~7s.&lt;/li&gt;
  &lt;li&gt;They’ve been hyped before, and I’m going to hype them again: GoLang’s Channels are fantastic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A modification to the GoLang implementation liberally uses channels as a FIFO queue to great effect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Spawns N routines, after each completes runs all whendone functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whendone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whendone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;#####Usage&lt;/p&gt;

&lt;p&gt;Note the channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filenames&lt;/code&gt; acting as a thread-safe queue.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;procs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;procs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It’s always a challenge (or a lot of fun) attempting to write the same thing in two languages, let alone five.
Each language’s idioms sway an implementation in a particular direction. Long story short, there are still a lot of discrepancies between the implementations.&lt;/li&gt;
  &lt;li&gt;Elixir and Golang have matured dramatically in a year’s time.&lt;/li&gt;
  &lt;li&gt;It is damn difficult to parse Scala code when you’ve been away for a while. It’s just… &lt;strong&gt;dense&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/09/29/etl-language-showdown/&quot;&gt;My previous conclusion&lt;/a&gt; still holds up, check it out (it’s at the bottom of the link).&lt;/li&gt;
  &lt;li&gt;This whole experiment has lived far longer than I thought.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;think-you-can-do-better-want-to-see-another-language-contribute&quot;&gt;Think you can do better? Want to see another language? Contribute.&lt;/h2&gt;

&lt;p&gt;Submit a pull request with your code changes and I’ll update the doc.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to all those who contributed to the repo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/egonelbre&quot;&gt;Egon Elbre&lt;/a&gt; - Go&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gbulmer&quot;&gt;gbulmer&lt;/a&gt; - Go&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josevalim&quot;&gt;José Valim&lt;/a&gt; - Elixir&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aheld&quot;&gt;Aaron Held&lt;/a&gt; - Python&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Amazon Lambda to Autoscale Background Work</title>
   <link href="http://localhost:4000/2015/04/20/amazon-lambda-for-autoscaling-work/"/>
   <updated>2015-04-20T08:38:32-07:00</updated>
   <id>http://localhost:4000/2015/04/20/amazon-lambda-for-autoscaling-work</id>
   <content type="html">&lt;p&gt;Many hours have been spent optimizing the cost background work. &lt;a href=&quot;http://www.iron.io/&quot;&gt;Iron.io&lt;/a&gt; has Iron Worker that scales up when a job is submitted,
&lt;a href=&quot;https://www.hirefire.io/&quot;&gt;HireFire&lt;/a&gt; spins up and down Heroku Dynos and AWS has Autoscale groups for EC2 instances.&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&quot;http://aws.amazon.com/lambda/&quot;&gt;Amazon Lambda’s&lt;/a&gt; joining the party. Only supporting node.js for the time being, this service magically autoscales
based on size of whatever queue is feeding it. It responds to a new entry into an empty queue within milliseconds and is
extremely cost efficient.&lt;/p&gt;

&lt;p&gt;A part of me feels for the hundreds of companies that rolled out their own scalable backend only to see this deprecate all that work overnight.
I would know, I worked on one.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Heroku announces ability to share apps as add ons</title>
   <link href="http://localhost:4000/2015/01/30/heroku-announces-ability-to-share-addons/"/>
   <updated>2015-01-30T11:12:36-08:00</updated>
   <id>http://localhost:4000/2015/01/30/heroku-announces-ability-to-share-addons</id>
   <content type="html">&lt;p&gt;Everytime I think I’m going to move off of Heroku for some fancy &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;
setup, they announce something that pulls me back.&lt;/p&gt;

&lt;p&gt;First it was the &lt;a href=&quot;https://blog.heroku.com/archives/2014/8/5/new-dashboard-and-metrics-beta&quot;&gt;metrics dashboard&lt;/a&gt; and now it’s the
&lt;a href=&quot;https://blog.heroku.com/archives/2015/1/23/expanding_the_power_of_add_ons&quot;&gt;ability to share add ons across apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This allows one to share a service between their own personal apps, easing the transition to a microservice architecture. All
with great metrics of course.&lt;/p&gt;

&lt;p&gt;Well done.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Centralized Logging of iPhone apps with Papertrail</title>
   <link href="http://localhost:4000/2015/01/08/centralized-logging-of-iphone-with-papertrail/"/>
   <updated>2015-01-08T12:13:38-08:00</updated>
   <id>http://localhost:4000/2015/01/08/centralized-logging-of-iphone-with-papertrail</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/images/PapertrailForIPhone.png&quot; alt=&quot;Papertrail for iPhone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://papertrailapp.com/&quot;&gt;Papertrail&lt;/a&gt; for all my server logging needs, and love it. I’m almost always bullish on the use of third party
services to offload work from a product dev team. Not too many people want to spend time working on log drains, me included.&lt;/p&gt;

&lt;p&gt;When doing iPhone development, working with logs outside of XCode is clumsy at best and usually nonexistent. And when your beta is in the wild, that’s not even an option
because you’re unable to round up all your testers’ devices.&lt;/p&gt;

&lt;p&gt;Don’t worry, I’m here to tell you your iOS app can be configured to automatically upload logs to &lt;a href=&quot;http://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-ios-or-os-x-apps/&quot;&gt;Papertrail&lt;/a&gt;
as described &lt;a href=&quot;http://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-ios-or-os-x-apps/&quot;&gt;here&lt;/a&gt; within 15 minutes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;###Status Quo
The standard solution for all this are Crash Reports via Apple Connect, Crashlytics, Parse, etc. But these only take you so far because sometimes you need &lt;strong&gt;more
than a call stack.&lt;/strong&gt; These logs will complement the crash report.&lt;/p&gt;

&lt;p&gt;###Reference Material&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack&quot;&gt;CocoaLumberjack&lt;/a&gt; is a pod that enables one to easily and asynchronously carry logs from the device to a destination, whether it be a terminal, a file, or a service. It’s the keystone to this arch, if you get what I’m saying.&lt;/li&gt;
  &lt;li&gt;PapertrailLumberjack allows one to transfer the logs from your iPhone to the Papertrail service.&lt;/li&gt;
  &lt;li&gt;Unfortunately, &lt;a href=&quot;http://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-ios-or-os-x-apps/&quot;&gt;the instructions for PapertrailLumberjack&lt;/a&gt; are only talking about Objective C,
and they refer to an outdated CocoaLumberjack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Issues&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The PapertrailLumberjack pod doesn’t support the current CocoaLumberjack.&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;No worries. &lt;a href=&quot;https://bitbucket.org/luisrecuenco/papertraillumberjack&quot;&gt;There is a patched PaperTrailLumberjack that supports CocoaLumberjack 2.x&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PapertrailLumberjack incompatible with Swift CocoaLumberjack.&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;I never did get the Swift version of CocoaLumberjack working alongside the Obj C version of PapertrailLumberjack (there’s a nightmare waiting to happen when converting ObjC Macros to Swift)
 so I’m using the ObjC version with &lt;a href=&quot;https://gist.github.com/dimroc/2aef1b6b1e391f0085d2&quot;&gt;my own Swift wrapper&lt;/a&gt; as you can see below.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As Swift and CocoaPods mature, PaperTrailLumberjack will eventually just work out of the box. Until then:&lt;/p&gt;

&lt;p&gt;###Steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add CocoaLumberjack 2.x and the patched PaperTrailLumberjack to your Podfile, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;CocoaLumberjack&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;git@github.com:dimroc/CocoaLumberjack.git&apos;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;PaperTrailLumberjack&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;https://bitbucket.org/luisrecuenco/papertraillumberjack.git&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the #imports to your bridging header file.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt; #import &quot;CocoaLumberjack.h&quot;
 #import &quot;RMPaperTrailLogger.h&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Swift, add my DDLogHelper to your project (copy pasta).&lt;/p&gt;

    &lt;noscript&gt;&lt;pre&gt;import Foundation

&lt;/pre&gt;&lt;/noscript&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;public let defaultDebugLevel = DDLogLevel.Debug
public let defaultTag = NSString(format: &quot;ManhattanForum&quot;)&lt;/p&gt;

&lt;p&gt;class DDLogHelper {
    class func SwiftLogMacro(async: Bool, level: DDLogLevel, flag flg: DDLogFlag, context: Int = 0, file: String = &lt;strong&gt;FILE&lt;/strong&gt;, function: String = &lt;strong&gt;FUNCTION&lt;/strong&gt;, line: UWord = &lt;strong&gt;LINE&lt;/strong&gt;, tag: AnyObject? = defaultTag, format: String, args: CVaListPointer) {
        let string = NSString(format: format, arguments: args) as String
        SwiftLogMacro(async, level: level, flag: flg, context: context, file: file, function: function, line: line, tag: tag, string: string)
    }&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class func SwiftLogMacro(isAsynchronous: Bool, level: DDLogLevel, flag: DDLogFlag, context: Int = 0, file: String = __FILE__, function: String = __FUNCTION__, line: UInt = __LINE__, tag: AnyObject? = defaultTag, string: String) {
    // Tell the DDLogMessage constructor to copy the C strings that get passed to it.
    // Had to hardcode context to 0.
    let logMessage = DDLogMessage(message: string, level: level, flag: flag, context: context, file: file, function: function, line: line, tag: tag, options: DDLogMessageOptions.CopyFunction | DDLogMessageOptions.CopyFile, timestamp: NSDate())

    DDLog.log(isAsynchronous, message: logMessage)
}

class func debug(logText: String, level: DDLogLevel = defaultDebugLevel, file: String = __FILE__, function: String = __FUNCTION__, line: UWord = __LINE__, asynchronous async: Bool = true, args: CVarArgType...) {
    SwiftLogMacro(async, level: level, flag: DDLogFlag.Debug, file: file, function: function, line: line, format: logText, args: getVaList(args))
} }&amp;lt;/pre&amp;gt;&amp;lt;/noscript&amp;gt;&amp;lt;script src=&quot;https://gist.github.com/dimroc/2aef1b6b1e391f0085d2.js&quot;&amp;gt; &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Configure DDLog and PapertrailLumberjack with your settings.&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Or any initializer method&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;paperTrailLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RMPaperTrailLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;paperTrailLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyHost.papertrailapp.com&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;paperTrailLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myportnumber&lt;/span&gt;

   &lt;span class=&quot;kt&quot;&gt;DDLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paperTrailLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;DDLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DDASLLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;DDLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DDTTYLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log away.&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kt&quot;&gt;DDLogHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Launching Papertrail logging for My App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###Conclusion
Compared to what I was doing before, I’m as happy as can be. And this was all with a free hosting plan. I’m still waiting to see what the impact on battery life and performance is. If you have any experience with this, drop me a line below.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Taming Callbacks in iOS: Bolts Framework</title>
   <link href="http://localhost:4000/2014/12/17/bolt-framework-promisekit-or-reactive-cocoa-for-async/"/>
   <updated>2014-12-17T15:53:26-08:00</updated>
   <id>http://localhost:4000/2014/12/17/bolt-framework-promisekit-or-reactive-cocoa-for-async</id>
   <content type="html">&lt;p&gt;Managing many asynchronous events in iOS can get hairy, but it’s a fact of life when working with
remote services. So how do we avoid callback hell?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promises&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below I’ll explain why I chose the &lt;a href=&quot;https://github.com/BoltsFramework/Bolts-iOS&quot;&gt;&lt;strong&gt;Bolts Framework (BF)&lt;/strong&gt;&lt;/a&gt;
over &lt;a href=&quot;https://github.com/mxcl/PromiseKit&quot;&gt;PromiseKit&lt;/a&gt; and &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A naive way to handle asynchronous code in Swift is with standard blocks. Let’s say we need to change the orientation of a video,
save a thumbnail, and then save the video for a post. We could end up with something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;videoAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MFVideoAssetResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageJPEGRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbnail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image/jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;imageFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveInBackgroundWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;videoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataWithContentsOfMappedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;videoFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;video/quicktime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;videoFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveInBackgroundWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveEventually&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;## &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Horrible Error Handler 1!&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;## FAILED &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Horrible Error Handler 2!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the callback pyramid of doom. If you’re unfamiliar with this, you can read more about it &lt;a href=&quot;http://blogs.telerik.com/kendoui/posts/13-03-28/what-is-the-point-of-promises&quot;&gt;here (article is on javascript, but concept still applies)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We don’t want this, and promises are the way to fix it. But which framework should we use?&lt;/p&gt;

&lt;h3 id=&quot;reactive-cocoa&quot;&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa#chaining-dependent-operations&quot;&gt;Reactive Cocoa?&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Based on the principals of Functional Reactive Programming.&lt;/li&gt;
  &lt;li&gt;Required one to wrap everything with &lt;strong&gt;RAC&lt;/strong&gt; types.&lt;/li&gt;
  &lt;li&gt;Focused on handling streams, not my primary use case.&lt;/li&gt;
  &lt;li&gt;When all I need are promises, RAC was too heavy and obtrusive for my tastes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;promisekit&quot;&gt;&lt;a href=&quot;http://promisekit.org/&quot;&gt;PromiseKit?&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Inspired by Bolts.&lt;/li&gt;
  &lt;li&gt;Separate library for Objective C and Swift, so it can take advantage of Swift generics.&lt;/li&gt;
  &lt;li&gt;Comes with Objective C categories for many built in iOS types, like &lt;strong&gt;NSURLConnection&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;At the time of this writing, it does not have a pod for the Swift library because of CocoaPod’s limitations.&lt;/li&gt;
  &lt;li&gt;Not straightforward when switching between Objective C and Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bolts-frameworks-bftask-yes&quot;&gt;&lt;a href=&quot;https://github.com/BoltsFramework/Bolts-iOS&quot;&gt;Bolts Framework’s BFTask?&lt;/a&gt; Yes.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The simplest of the three.&lt;/li&gt;
  &lt;li&gt;Works seamlessly across Objective C and Swift.&lt;/li&gt;
  &lt;li&gt;Does not support Swift generics which can lead to some verbosity.&lt;/li&gt;
  &lt;li&gt;Supported natively by the Parse Framework, which is what I’m using.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I actually started with PromiseKit and just went to Bolts because I found it the simplest of the three. At first, I was all about the Swift support,
but found myself going back and forth between Obj C and Swift, making Bolts a better match. As CocoaPods and Swift matures, I will definitely take
another glance at PromiseKit. Right now, I’m extremely happy with BFTask:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;videoAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MFVideoAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BFTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoAsset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continueWithSuccessBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MFVideoAssetResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MFVideoAssetResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;## Video Orientation Fixed to &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageJPEGRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbnail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image/jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;videoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataWithContentsOfMappedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;videoFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;video/quicktime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parallelTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveInBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveInBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BFTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forCompletionOfAllTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallelTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;continueWithSuccessBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;video&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageFile&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoFile&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveEventuallyAsTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And better error handling code because in true promise fashion, the caller can receive the error at the end regardless of where it happens:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;PostRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;continueWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BFTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PFObject&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Better Error Handler!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIAlertControllerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error Saving Post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Smash your iOS pyramids of doom with &lt;a href=&quot;https://github.com/BoltsFramework/Bolts-iOS&quot;&gt;Bolts&lt;/a&gt; or &lt;a href=&quot;www.promisekit.org&quot;&gt;PromiseKit&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Handle to streams of potentially infinite data with ReactiveCocoa.&lt;/li&gt;
  &lt;li&gt;See the source code for all these samples &lt;a href=&quot;https://github.com/dimroc/manhattan_forum&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Not All Migrations are Equal: Schema vs. Data</title>
   <link href="http://localhost:4000/2014/12/11/migrating-data-separate-from-the-schema/"/>
   <updated>2014-12-11T15:42:07-08:00</updated>
   <id>http://localhost:4000/2014/12/11/migrating-data-separate-from-the-schema</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update 01/26/2015: Check out the &lt;a href=&quot;https://github.com/jasonfb/nondestructive_migrations&quot;&gt;nondestructive_migrations&lt;/a&gt; gem. It’s similar to dimroc/datafix but simpler because it
leverages existing AR code. It does not however generate specs… yet.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ve been using &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Migration.html&quot;&gt;Active Record Migrations&lt;/a&gt; to manage changes in
your database and you love it. But then a model’s validations change, and all your existing data becomes invalid.&lt;/p&gt;

&lt;p&gt;What do you do? Place it in an AR migration? Depends. Those are primarily for &lt;strong&gt;schema migrations&lt;/strong&gt; and this is not a schema change.&lt;/p&gt;

&lt;p&gt;You need to run a &lt;strong&gt;data migration&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;What are your options?&lt;/p&gt;

&lt;h2 id=&quot;stuff-it-into-an-ar-migration-if-its-simple-enough&quot;&gt;Stuff it into an AR migration? If it’s simple enough.&lt;/h2&gt;

&lt;p&gt;It would probably be your first move. Sure, you can get away with a few hundred or even thousand of rows
and no one will break a sweat. Let’s look at how you would do that.&lt;/p&gt;

&lt;h3 id=&quot;bad-schema-migration&quot;&gt;Bad Schema Migration&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChangeAdminDefaultToFalseOnUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_column_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset_column_information&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Bad: Use of application code that changes over time.&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_null_to_false!&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;good-schema-migration&quot;&gt;Good Schema Migration&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChangeAdminDefaultToFalseOnUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Create empty AR model that will attach to the users table,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and isolate migration from application code.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_column_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;admin: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;better-schema-migration&quot;&gt;Better Schema Migration&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChangeAdminDefaultToFalseOnUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_column_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UPDATE users SET admin = false WHERE admin IS NULL&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With most people’s usage pattern, everything in &lt;strong&gt;db/migrate/&lt;/strong&gt; has to live for months due to habitual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; invocations,
which is why using application code in an AR migration is frowned upon (sure, you can move onto schema:load and delete migrations, but let’s keep things simple for now).&lt;/p&gt;

&lt;p&gt;That application code will change weeks or even days from now, and then running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; will be busted.&lt;/p&gt;

&lt;p&gt;Most people get by using the &lt;strong&gt;Good&lt;/strong&gt; and &lt;strong&gt;Better&lt;/strong&gt; schema migration methods, but there comes a time when either the scale
or the complexity of the migration warrants its own code. The time when pure SQL will only get you so far or when the runtime of the migration
spans days not seconds.&lt;/p&gt;

&lt;p&gt;What do you do?&lt;/p&gt;

&lt;h2 id=&quot;create-a-one-off-rake-task-no&quot;&gt;Create a one off rake task? No.&lt;/h2&gt;

&lt;p&gt;Perhaps, but the code will be difficult to test and won’t have mechanisms in place to roll back to changes. Even if you refactor the logic out of
the rake task into a separate ruby class, you will now have to maintain code that is ephemeral in nature. It merely exists for this one off data migration.&lt;/p&gt;

&lt;p&gt;One approach is to create a &lt;strong&gt;oneshots.rake&lt;/strong&gt; file, but that ends up being a ghetto of random tasks with no test coverage that never gets cleaned up&lt;/p&gt;

&lt;h1 id=&quot;datafixes-yes&quot;&gt;&lt;a href=&quot;https://github.com/dimroc/datafix&quot;&gt;Datafixes!&lt;/a&gt; Yes.&lt;/h1&gt;

&lt;p&gt;Basically a mirror of AR migrations, every rails user will feel right at home with &lt;a href=&quot;https://github.com/dimroc/datafix&quot;&gt;datafixes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the gem from my repo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;datafix&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;dimroc/datafix&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The changes will eventually be incorporated into the main gem `datafix`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run the generator to create the datafix template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rails g datafix AddValidWholesalePriceToProducts
  create  db/datafixes/20141211143848_add_valid_wholesale_price_to_products.rb
  create  spec/db/datafixes/20141211143848_add_valid_wholesale_price_to_products_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fill out the datafix with your data migration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Datafixes::AddValidWholesalePriceToProducts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Datafix&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wholesale_price_cents: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;wholesale_price_cents: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch_price_from_amazon&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then just run the rake tasks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rake db:datafix
  migrating AddValidWholesalePriceToProducts up

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rake db:datafix:status

  database: somedatabase_development

   Status   Datafix ID            Datafix Name
  &lt;span class=&quot;nt&quot;&gt;--------------------------------------------------&lt;/span&gt;
     up    20141211143848       AddValidWholesalePriceToProducts&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unlike AR migrations, it generates specs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rails_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;datafixes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20141211143848_add_valid_wholesale_price_to_products&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Datafixes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AddValidWholesalePriceToProducts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.up&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Fill out the describe block&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;wholesale_price_cents: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;validate: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should fix the price and be valid&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_valid&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;up&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_valid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the real kicker: when the code has overstayed its welcome, you can just delete the datafix. That’s not so simple with a schema migration in &lt;strong&gt;db/migrate/&lt;/strong&gt;. 
The datafix is ephemeral in nature and isn’t worth maintaining months down the road.&lt;/p&gt;

&lt;p&gt;This is super handy in all the scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Denormalizing values to another table&lt;/li&gt;
  &lt;li&gt;Changing data to comply with changing validations&lt;/li&gt;
  &lt;li&gt;Long running data migrations that span days&lt;/li&gt;
  &lt;li&gt;Migrating from one table to another&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;For data migrations, datafixes are far better than anything out there, but it’s still brand new and rough around the edges. It doesn’t even have
&lt;strong&gt;rake db:datafix:rollback&lt;/strong&gt; yet! &lt;a href=&quot;https://github.com/dimroc/datafix&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The&lt;/em&gt; &lt;a href=&quot;https://github.com/dimroc/datafix&quot;&gt;&lt;strong&gt;dimroc&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;fork has many upgrades to the Casecommons version, including the rake tasks that function like *rake db:migrate&lt;/em&gt;. It will eventually be incorporated into the Casecommons version
when they stop sending email and look at the PR.*&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Casecommons/datafix&quot;&gt;Casecommons/datafix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://railsguides.net/change-data-in-migrations-like-a-boss&quot;&gt;Change data in migrations like a boss&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.honeybadger.io/blog/2013/08/06/zero-downtime-migrations-of-large-databases-using-rails-postgres-and-redis&quot;&gt;Zero Downtime Migrations of Large Databases - Honeybadger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Eager Pagination with Elasticsearch-rails</title>
   <link href="http://localhost:4000/2014/11/12/eager-pagination-with-elasticsearch-rails/"/>
   <updated>2014-11-12T05:43:15-08:00</updated>
   <id>http://localhost:4000/2014/11/12/eager-pagination-with-elasticsearch-rails</id>
   <content type="html">&lt;p&gt;So you’re searching millions of records with &lt;a href=&quot;https://github.com/elasticsearch/elasticsearch-rails/tree/master/elasticsearch-model&quot;&gt;Elasticsearch-model&lt;/a&gt;
but want to eagerly load all associations when rendering your page for performance reasons. But wait, you’re using &lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;Kaminari&lt;/a&gt; for pagination,
and when you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes(:association)&lt;/code&gt;, you lose the pagination support.&lt;/p&gt;

&lt;p&gt;Below, you’ll see how a simple delegator will relieve your woes and eagerly load associations with support for pagination.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;flower&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;view&quot;&gt;View&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginate&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@gifts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;error&quot;&gt;Error!&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`current_page&apos; for #&amp;lt;Gift::ActiveRecord_Relation:0x007fa1845de2d8&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;h4 id=&quot;controller-1&quot;&gt;Controller&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;flower&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EagerPagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scope_with_eager_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;model&quot;&gt;Model&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gift&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Elasticsearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scope_with_eager_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;delegator&quot;&gt;Delegator&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EagerPagination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scope&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;public_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s going on here? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EagerPagination&lt;/code&gt; overrides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def each&lt;/code&gt; method to use the eager loading scope,
but delegates all other calls to the underlying records object that still has Kaminari pagination support.&lt;/p&gt;

&lt;p&gt;My initial solution started to dive into the &lt;a href=&quot;https://github.com/elasticsearch/elasticsearch-rails/tree/master/elasticsearch-model&quot;&gt;Elasticsearch-model&lt;/a&gt;
implementation, but in the end I felt that the ES gem shouldn’t burden itself with the responsibilities of handing AR scopes.&lt;/p&gt;

&lt;p&gt;I’m happy with how light this final outcome is. Simplicity is king.&lt;/p&gt;

&lt;p&gt;Full example can be found in the gist below.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;class EagerPagination &amp;lt; SimpleDelegator
  attr_reader :records, :scope

  def initialize(records, scope)
    super(records)
    @records = records
    @scope = scope
  end

  def each
    records.public_send(scope).each do |r|
      yield r
    end
  end
end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/dimroc/ccc6c80c747ee8f957f3.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Arelastic for your Elasticsearch Queries pt.1</title>
   <link href="http://localhost:4000/2014/10/29/arelastic-for-building-your-es-queries/"/>
   <updated>2014-10-29T05:45:25-07:00</updated>
   <id>http://localhost:4000/2014/10/29/arelastic-for-building-your-es-queries</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update 08/2015: &lt;a href=&quot;https://github.com/elastic/elasticsearch-ruby/tree/master/elasticsearch-dsl&quot;&gt;Elasticsearch-ruby has its own DSL&lt;/a&gt;.
It’s officially supported by Elasticsearch so be sure to check it out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When doing more than just a simple search with &lt;a href=&quot;https://github.com/elasticsearch/elasticsearch-rails/tree/master/elasticsearch-model&quot;&gt;Elasticsearch-rails&lt;/a&gt;,
a naive approach will lead you to this mess:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query:     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;match:  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Fox Dogs&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                          &lt;span class=&quot;ss&quot;&gt;highlight: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fields: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t be a sucker! Read on to see how &lt;a href=&quot;https://github.com/matthuhiggins/arelastic&quot;&gt;Arelastic&lt;/a&gt; can save you pain.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you don’t know already, the Elasticsearch (ES) API takes a JSON hash when perfoming queries or filters or both.
Elasticsearch’s DSL is incredibly flexibly, but can quickly lead you down the path of unmaintanable hashes.&lt;/p&gt;

&lt;p&gt;Here is the json for the always popular &lt;strong&gt;filtered query&lt;/strong&gt;, the search for a string after removing those outside
the filter. In this case, the filter being greater than or equal to yesterday:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filtered&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tweet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;full text search&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;now - 1d / d&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s say you want to change the query from &lt;strong&gt;“full text search”&lt;/strong&gt; to &lt;strong&gt;“Rihanna”&lt;/strong&gt; (obviously). One might be tempted
to have a method that drops in a variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filtered_gte_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter_term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;filtered: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;match: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tweet: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;filter: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;range: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gte: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now we’re walking down the path to hell. Heaven forbid we want a filter than does less than or equal to, supports AND queries, or is chainable. The number
of methods and hashes will spiral out of control.&lt;/p&gt;

&lt;h2 id=&quot;introducing-arelastic&quot;&gt;Introducing &lt;a href=&quot;https://github.com/matthuhiggins/arelastic&quot;&gt;Arelastic&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Modeled after Rails’ &lt;a href=&quot;https://github.com/rails/arel&quot;&gt;Arel&lt;/a&gt; which is a SQL Abstract Syntax Tree (AST) manager,
Arelastic is an AST manager for Elasticsearch Queries.&lt;/p&gt;

&lt;p&gt;Rather than working with hashes, you work with objects that represent nodes in the AST:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;book_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gteq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Searches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tweet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_term&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Searches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_elastic&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s one interesting line of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Arelastic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;book_id&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gteq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gteq&lt;/code&gt; method exists alongside many other range filters, allowing one to make a chainable API much alike ActiveRecord.
Funny enough, there exists an &lt;a href=&quot;https://github.com/data-axle/elastic_record&quot;&gt;ElasticRecord&lt;/a&gt; that’s built on top of this,
and precedes the new official &lt;a href=&quot;https://github.com/elasticsearch/elasticsearch-rails&quot;&gt;Elasticsearch-rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The community is behind Elasticsearch-rails, but it has yet to introduce an Arel equivalent, and we all want to move towards that.
Here’s hoping we can take Arelastic and incorporate it into Elasticsearch-rails so we no longer have to tame unwieldy hashes.&lt;/p&gt;

&lt;p&gt;Now the implementation might look cryptic, but to those familiar with ES, you can see on the ES DSL’s page &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-filtered-query.html&quot;&gt;here&lt;/a&gt;
all the query and filter nodes available, and know there’s an equivalent mapping in the Arelastic library. This would be the building block to an ORM like interface we’re far more comfortable with.&lt;/p&gt;

&lt;p&gt;Then we can write Elasticsearch queries like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Gift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search_builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;color&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;flower&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After &lt;a href=&quot;https://gist.github.com/dimroc/2eec84498b6a35550f48&quot;&gt;my first bold attempt right here&lt;/a&gt; to create a chainable API using monads,
you can see how much simpler it is to create complicated Elasticsearch Queries:&lt;/p&gt;

&lt;p&gt;###Consumption&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GiftsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;search_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SearchBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;organization_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_organization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gte: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;id desc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In part 2, we’ll take the next step support even more ElasticSearch queries and see what it would take to make this badboy a gem.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pundit for Roles on Rails</title>
   <link href="http://localhost:4000/2014/10/23/pundit-for-roles/"/>
   <updated>2014-10-23T06:58:56-07:00</updated>
   <id>http://localhost:4000/2014/10/23/pundit-for-roles</id>
   <content type="html">&lt;p&gt;Roles are almost always a requirement for a web app. There are many good options out there for Rails, with the old guard being &lt;a href=&quot;https://github.com/CanCanCommunity/cancancan&quot;&gt;CanCan&lt;/a&gt;
and &lt;a href=&quot;https://github.com/RolifyCommunity/rolify&quot;&gt;Rolify&lt;/a&gt;. But then I met this newcomer, &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;Pundit&lt;/a&gt;, and its
simplicity stole the show.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The Rails 3 goto was &lt;a href=&quot;https://github.com/CanCanCommunity/cancancan&quot;&gt;CanCan&lt;/a&gt;, and I loved it.
CanCan worked great with Devise and helped encapsulate everything role related into &lt;strong&gt;Abilities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pundit encapsulates authorization and scoping through &lt;strong&gt;Policies&lt;/strong&gt;, using pure ruby classes and amazingly intuitive convention over configuration.&lt;/p&gt;

&lt;p&gt;This does mean that you will have to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; (or whatever you need) columns manually, but the simplicity of it all will save you in the long run.&lt;/p&gt;

&lt;h4 id=&quot;policy&quot;&gt;Policy&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostPolicy&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;usage-in-controller&quot;&gt;Usage in Controller&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;respond_with&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Controller#update&lt;/code&gt; action will automatically invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Policy#update?&lt;/code&gt; by convention.&lt;/p&gt;

&lt;p&gt;Sure, this will work for actions on individual members, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;. But what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt;? That’s where scoping comes in:&lt;/p&gt;

&lt;h4 id=&quot;scope&quot;&gt;Scope&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationPolicy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scope&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scope&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:published&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;usage-in-controller-1&quot;&gt;Usage in Controller&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The snippets here were ripped off the GitHub page, &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;check it out&lt;/a&gt; for yourself. It’s a fantastic gem.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Toggleable Fakes for better integration testing</title>
   <link href="http://localhost:4000/2014/09/30/toggleable-fakes/"/>
   <updated>2014-09-30T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/30/toggleable-fakes</id>
   <content type="html">&lt;p&gt;During the development of &lt;a href=&quot;https://github.com/dimroc/iOS.ProjectMonitor&quot;&gt;iOS Project Monitor&lt;/a&gt;, I ran into the need
to test against a few third party services. Engineyard’s Andy Delcambre gave a great talk on how to use test matrices and fake services
to write one test that hits both your fake and the service.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Most people leap towards &lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;WebMock&lt;/a&gt; or &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;VCR&lt;/a&gt; to test against services. This is an alternate approach that is a little more
upfront work but adds incredible confidence in your code.&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FakeThirdParty&lt;/code&gt; service.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;sinatra/base&apos;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakePusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/apps/:app_id/events&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;provides: :json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# start the server if ruby file executed directly&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeError&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/json&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;server error&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeUnauthorized&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/json&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unauthorized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Using WebMock, route all traffic to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.thirdparty.com&lt;/code&gt; to our sinatra fake. Take note of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to_rack&lt;/code&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;webmock/rspec&apos;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FakeSpecHelpers&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;servers_return_healthy&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;WARNING: Stubbing out healthy servers&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;WebMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stub_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*api.pusherapp.com\/.*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FakePusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;servers_return_error&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;WebMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stub_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FakeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;servers_return_unauthorized&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;WebMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stub_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_rack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FakeUnauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FakeSpecHelpers&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INTEGRATION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;WebMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allow_net_connect!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;WebMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disable_net_connect!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servers_return_healthy&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Using an environment variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTEGRATION=true&lt;/code&gt;, you can turn off the WebMock routing and have the tests hit the real service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Performing a Tear down, or cleaning, your third party test environment can be hard, if not impossible.&lt;/li&gt;
  &lt;li&gt;Data from one test can then pollute other tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For something a little more elaborate, check out iOS Project Monitor’s &lt;a href=&quot;https://github.com/dimroc/iOS.ProjectMonitor/blob/master/backend/spec/fakes/fake_parse.rb&quot;&gt;Fake Parse Service&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dimroc/iOS.ProjectMonitor/blob/master/backend/spec/support/webmock.rb&quot;&gt;WebMock Routing&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/26510145&quot; width=&quot;500&quot; height=&quot;283&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://vimeo.com/26510145&quot;&gt;[16M05] Toggleable Mocks and Testing Strategies in a Service Oriented Architecture (en)&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/rubykaigi&quot;&gt;rubykaigi&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A better error handling future for iOS with Swift</title>
   <link href="http://localhost:4000/2014/09/30/error-handling-in-swift/"/>
   <updated>2014-09-30T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/30/error-handling-in-swift</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update: I now handle errors from callbacks with the &lt;a href=&quot;http://www.dimroc.com/2014/12/17/bolt-framework-promisekit-or-reactive-cocoa-for-async/&quot;&gt;Bolts Framework&lt;/a&gt;. Consider this article deprecated.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pattern matching is a fantastic mechanism found in functional programming languages, and &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt; has it! Below, we’ll find out how to use it to encapsulate errors in asynchronous code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;swift-enumerations&quot;&gt;Swift Enumerations&lt;/h3&gt;

&lt;p&gt;Define different cases, resulting in new classes scoped to the enum.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogleGeocoderResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MFLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instantiate one of the enumbs depending on the scenario:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AFHTTPRequestOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogleGeocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GoogleGeocoderResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GoogleGeocoderResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; syntax to perform pattern matching against these enum classes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;GoogleGeocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GoogleGeocoderResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the benefits to pattern matching is speed. Although one might infer run-time type checking in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;, it is all mostly done at compile time via polymorphism or some other mechanism.&lt;/p&gt;

&lt;p&gt;This does not eliminate the need for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSError&lt;/code&gt;. That approach is still recommended when interacting with UIKit, etc.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://swiftlytyping.tumblr.com/post/88210131086/error-handling?utm_campaign=iOS_Dev_Weekly_Issue_150&amp;amp;utm_medium=email&amp;amp;utm_source=iOS%2BDev%2BWeekly&quot;&gt;Swiftlytyping’s post on Swift error handling&lt;/a&gt;
for a more thorough example with generics.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Comparing Golang, Scala, Elixir and Ruby for ETL</title>
   <link href="http://localhost:4000/2014/09/29/etl-language-showdown/"/>
   <updated>2014-09-29T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/29/etl-language-showdown</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update 05/11/2015: After reading this, check out &lt;a href=&quot;/2015/05/07/etl-language-showdown-pt2/&quot;&gt;part 2&lt;/a&gt; to
see how updates to the younger languages (Elixir, Golang) and changes to the algorithm (no intermediary reduction file) affected results.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-there-is-now-a-part-3&quot;&gt;&lt;em&gt;Update: There is now a &lt;a href=&quot;/2015/11/14/etl-language-showdown-pt3/&quot;&gt;part 3&lt;/a&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;How do the following languages stack up when running an &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;extract, transform, and load (ETL)&lt;/a&gt; against ~40M tweets? Read on to find out more.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/news/2013/12/25/ruby-2-1-0-is-released/&quot;&gt;Ruby, JRuby, and Parallel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://golang.org/&quot;&gt;Golang 1.2&lt;/a&gt; - Imperative&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scala-lang.org/&quot;&gt;Scala 2.10.4&lt;/a&gt; - Both Imperative and Functional&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir 0.13.0&lt;/a&gt; - Functional&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Compare each language’s productivity, terseness and readability. The performance comparisons should not be taken too seriously. If anything,
it is a bigger indication of my skillset and my ability to ramp up in that language rather than their performance capabilities. Nonetheless, they are here to reflect what I would realistically face.&lt;/p&gt;

&lt;h2 id=&quot;the-task&quot;&gt;The Task&lt;/h2&gt;

&lt;p&gt;Count the number of tweets that mention &lt;em&gt;knicks&lt;/em&gt; in their message and aggregate them based on the neighborhood of origin.
The ~1GB dataset for this task, sampled below, contains a tweet’s message and its NYC neighborhood. &lt;a href=&quot;https://dimroc-public.s3.amazonaws.com/etl-language-comparison/tweets20140416.tar.gz&quot;&gt;It can be downloaded here&lt;/a&gt;.
Too small to warrant Hadoop, but large enough to run in parallel. The algorithm maps each entry to a file, and reduces all files in memory for a final output.&lt;/p&gt;

&lt;p&gt;Example Input (spans multiple files):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;91	west-brighton	Brooklyn	Uhhh
121	turtle-bay-east-midtown	Manhattan	Say anything
175	morningside-heights	Manhattan	It feels half-cheating half-fulfilling to cite myself.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example Output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;midtown-midtown-south	4845
hudson-yards-chelsea-flatiron-union-square	746
battery-park-city-lower-manhattan	625
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;initial-assumption&quot;&gt;Initial Assumption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;These tasks are not run on Hadoop but do run concurrently. Performance numbers are expected to be moot since the CPU mostly sits idle waiting on Disk IO.&lt;/li&gt;
  &lt;li&gt;**UPDATE: Boy was the IO bound assumption wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-hardware&quot;&gt;The Hardware&lt;/h2&gt;

&lt;p&gt;MacBook Pro 2.3GHz i7 (quad core) with 8GB RAM and 5200 RPM HDD&lt;/p&gt;

&lt;h2 id=&quot;the-languages&quot;&gt;The Languages&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/news/2013/12/25/ruby-2-1-0-is-released/&quot;&gt;Ruby 2.1.0&lt;/a&gt; with &lt;a href=&quot;http://celluloid.io/&quot;&gt;Celluloid&lt;/a&gt;  - Exposes the GIL limitation in pure ruby and shows the multicore advantage of JRuby.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/news/2013/12/25/ruby-2-1-0-is-released/&quot;&gt;Ruby 2.1.0&lt;/a&gt; and &lt;a href=&quot;http://www.gnu.org/software/parallel/&quot;&gt;GNU Parallel&lt;/a&gt;  - Uses GNU parallel to run ruby processes on multiple cores.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://golang.org/&quot;&gt;Golang 1.2&lt;/a&gt; - Imperative&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scala-lang.org/&quot;&gt;Scala 2.10.4&lt;/a&gt; - Both Imperative and Functional&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir 0.13.0&lt;/a&gt; - Functional&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;h4 id=&quot;features-used&quot;&gt;Features used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Celluloid Actor Pool&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;observations&quot;&gt;Observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Performance is very respectable when considering the GIL lock: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1m15.243s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Performance is great when run on &lt;strong&gt;JRuby&lt;/strong&gt;, which uses all available cores: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0m41.268s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby-with-gnu-parallel&quot;&gt;Ruby with GNU Parallel&lt;/h3&gt;

&lt;p&gt;This is effectively:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ parallel -j 100% -a commands.txt &amp;amp;&amp;amp; ruby reducer.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;features-used-1&quot;&gt;Features used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;GNU Parallel to get around the GIL and more accurately mirror a real world scenario: Many single core workers running one ruby process (eg: Heroku dynos)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;observations-1&quot;&gt;Observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Performance is excellent, with all cores on full blast: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40s&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This implementation is cheating in some areas but serves as a good baseline for other comparisons.&lt;/li&gt;
  &lt;li&gt;Separate processes can be a maintenance nightmare. It leads to memory bloat, is difficult to coordinate failed processes, and can be difficult to deploy and scale. There is simplicity in being able to deploy one process that is capable of using all cores.&lt;/li&gt;
  &lt;li&gt;From experience, Ruby’s real weakness is its poor performance handling long-running jobs. Memory leaks run rampant. &lt;a href=&quot;http://blog.redfin.com/devblog/2010/05/how_and_why_twitter_uses_scala.html#.U10CzWRdXLh&quot;&gt;Twitter shared this opinion&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;golang&quot;&gt;Golang&lt;/h2&gt;

&lt;h4 id=&quot;features-used-2&quot;&gt;Features used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;goroutines&lt;/li&gt;
  &lt;li&gt;channels&lt;/li&gt;
  &lt;li&gt;selects&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;observations-2&quot;&gt;Observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Performance after first write with no optimizations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3m23.165s&lt;/code&gt;. &lt;strong&gt;Was only using one core!&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Performance average after using all cores by manually setting GOMAXPROCS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1m03.593s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17868419/how-can-my-go-program-keep-all-the-cpu-cores-busy&quot;&gt;Had to research why all cores weren’t used here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Ultimately, &lt;a href=&quot;http://golang.org/pkg/runtime/#GOMAXPROCS&quot;&gt;GOMAXPROCS will be removed&lt;/a&gt; and scheduling will automatically make use of all cores.&lt;/li&gt;
  &lt;li&gt;Golang’s libraries are fantastic but don’t have the mature optimizations of other languages (yet).&lt;/li&gt;
  &lt;li&gt;Ended up being the fewest lines of code across all languages, by a lot.&lt;/li&gt;
  &lt;li&gt;Golang is not functional, so don’t force functional programming concepts, like map and reduce. For loops for days…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-joy&quot;&gt;Moments of Joy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Handling goroutines with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel&lt;/code&gt;s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputFiles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finished mapping.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Iterating over a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defer&lt;/code&gt; for cleanup of file resources.&lt;/li&gt;
  &lt;li&gt;Command-line debugger (but I didn’t need it).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-disappointment&quot;&gt;Moments of Disappointment&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Verbose error handling. There are design patterns to better manage errors, but were skipped for this demo.&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Having to explicitly set the number of cores to use via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOMAXPROCS&lt;/code&gt; because of immature scheduling.&lt;/li&gt;
  &lt;li&gt;Lack of collection helpers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scala&quot;&gt;Scala&lt;/h2&gt;

&lt;h4 id=&quot;features-used-3&quot;&gt;Features used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Akka (Supervisors and Actors)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;observations-3&quot;&gt;Observations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Performance after first write on first run: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Performance on subsequent runs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;27s&lt;/code&gt;. The JVM is probably doing something fancy.&lt;/li&gt;
  &lt;li&gt;All cores used.&lt;/li&gt;
  &lt;li&gt;Not as IO bound as originally thought. Attributed to the optimizations in the BufferedSource/BufferedWriter classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-joy-1&quot;&gt;Moments of Joy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Witnessing the speed after the first write.&lt;/li&gt;
  &lt;li&gt;Seeing BDD style testing as default for ScalaTest.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; to handle messages in the Actor system.&lt;/p&gt;

    &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActorSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MapSystem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mapSupervisor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;actorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MapSupervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mapsupervisor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapSupervisor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessDirectoryMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;Await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Inf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;shutdown&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt run&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt test&lt;/code&gt; work well, especially for fetching dependencies.&lt;/li&gt;
  &lt;li&gt;Realizing the power of Akka and Akka Cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-disappointment-1&quot;&gt;Moments of Disappointment&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Inability to debug via the command line.&lt;/li&gt;
  &lt;li&gt;Having to set implicit variables: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implicit val timeout = Timeout(5 minutes)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Having to use Java libraries for File IO.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;elixir&quot;&gt;Elixir&lt;/h2&gt;

&lt;h4 id=&quot;features-used-4&quot;&gt;Features used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Streams&lt;/li&gt;
  &lt;li&gt;pipeline operators&lt;/li&gt;
  &lt;li&gt;PIDs&lt;/li&gt;
  &lt;li&gt;All the Erlang and Elixir goodness&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;observations-4&quot;&gt;Observations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Performance average after first write with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:delayed_write&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2m30.508s&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This number says less about Elixir’s performance and more about how much I suck at writing Elixir code. Ease of writing performant code though is a valid factor.&lt;/li&gt;
  &lt;li&gt;Extremely productive language once one knows the module functions, but difficult to discover.&lt;/li&gt;
  &lt;li&gt;Clearly designed for use with a text editor and the command-line (It’s great).&lt;/li&gt;
  &lt;li&gt;The Elixir docs are usually the sole source of information, thankfully they are pretty good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-joy-2&quot;&gt;Moments of Joy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/elixir-lang/vim-elixir&quot;&gt;MacVim Vundle!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Using Interactive Elixir, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iex&lt;/code&gt; and Mix is fantastic. Preferable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbt console&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Matching on assignment: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, result} = {:ok, 5}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Functional style coupled with pipeline operators and anonymous methods makes for some beautifully code.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.into&lt;/code&gt; allows manipulation of infinite collections in a terse manner&lt;/p&gt;

    &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:delayed_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;moments-of-disappointment-2&quot;&gt;Moments of Disappointment&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The lack of objects is initially infuriating. Hard to encapsulate logic, and structs don’t seem like a substitute. It effectively means that most if not all built-in methods only return primitive types as opposed to objects.&lt;/li&gt;
  &lt;li&gt;Lack of online resources because of small community. Few Stack Overflow posts, etc.&lt;/li&gt;
  &lt;li&gt;Discoverability is tricky since methods are all module functions on primitive types, therefore you can’t look up the primitive type, but must know the relevant module.&lt;/li&gt;
  &lt;li&gt;Inability to fold/reduce from a stream in a straighforward manner. Had to hold contents in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Only after returning to a functional language like Elixir do I realize the convenience of &lt;strong&gt;Object Oriented meets Functional&lt;/strong&gt;. Big ups to Scala.&lt;/li&gt;
  &lt;li&gt;The ability to return an object with relevant methods while still being immutable adds the power of discoverability, a huge advantage over the manipulation of maps and other primitives with module functions.&lt;/li&gt;
  &lt;li&gt;The big surprise was JRuby’s performance and the impact of being able to use all cores. Running Puma on JRuby is very compelling when using a system with multiple cores.&lt;/li&gt;
  &lt;li&gt;Golang’s simplicity is very refreshing and their built-in profiling contributes to a philosophy of hand-tuning code for the best performance.&lt;/li&gt;
  &lt;li&gt;Scala, on the other hand, has the user well removed from the low level, but the JVM handles a lot of optimizations for the programmer, and it shows. If only I didn’t need an IDE…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For ETL operations, it would be remiss to ignore the Hadoop and Java ecosystem. Scala provides an incredible toolset for all ETL operations, but I can’t help but want to code in Golang.&lt;/p&gt;

&lt;p&gt;As always, feel free to check out the &lt;a href=&quot;https://github.com/dimroc/etl-language-comparison/tree/v1&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elasticsearch behind NGINX on AWS</title>
   <link href="http://localhost:4000/2014/09/28/elasticsearch-nginx/"/>
   <updated>2014-09-28T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/28/elasticsearch-nginx</id>
   <content type="html">&lt;p&gt;Hosting on Heroku or any other multi-tenant PaaS means you’re sharing IP security with other people. Now your web services require at least basic auth
when interacting with services like MySQL and Elasticsearch. We will run Elasticsearch behind nginx, which will enforce a username/pw for basic auth.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;To skip the details and get up and going locally, check out this &lt;a href=&quot;https://github.com/dimroc/secure-elasticsearch-vagrant&quot;&gt;GitHub repo with a Vagrantfile that uses Docker images to run Elasticsearch behind nginx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want a big boy’s deployment for production, check out &lt;a href=&quot;http://blogs.aws.amazon.com/application-management/post/Tx3MEVKS0A4G7R5/Deploying-Elasticsearch-with-OpsWorks&quot;&gt;AWS’s OpsWorks Layer for Elasticsearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On to the fun:&lt;/p&gt;

&lt;h3 id=&quot;high-level-overview&quot;&gt;High-level Overview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx will be the only public facing ip, and serve as the gateway to all Elasticsearch nodes.&lt;/li&gt;
  &lt;li&gt;Nginx will enforce basic auth before proxying all HTTP requests to the ES nodes in a round robin fashion.
    &lt;ul&gt;
      &lt;li&gt;This will be done using an .htpasswd file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you’ve spun up Elasticsearch, go through the following steps:&lt;/p&gt;

&lt;h3 id=&quot;example-nginx-proxy-file&quot;&gt;Example Nginx Proxy File&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Based on https://github.com/elasticsearch/kibana/blob/master/sample/nginx.conf&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;server&lt;/span&gt; {
  &lt;span class=&quot;nc&quot;&gt;listen&lt;/span&gt;                80 default_server;

  &lt;span class=&quot;nc&quot;&gt;location&lt;/span&gt; / {
    proxy_pass http://elasticsearch:9200; &lt;span class=&quot;c&quot;&gt;# elastic search node&lt;/span&gt;
    proxy_set_header &lt;span class=&quot;ss&quot;&gt;Host&lt;/span&gt;      $host;
    proxy_set_header X-Real-IP $remote_addr;

    auth_basic &quot;Restricted&quot;;
    auth_basic_user_file /etc/nginx/conf.d/elasticsearch.htpasswd;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;generate-elasticsearchhtpasswd-file&quot;&gt;Generate elasticsearch.htpasswd file&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; nginx/elasticsearch.htpasswd elasticsearch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now run nginx with it pointing to ES, and you’re good to go.&lt;/p&gt;

&lt;p&gt;Further reading: &lt;a href=&quot;http://engineering.wattpad.com/post/78037079531/using-nginx-as-a-proxy-for-elasticsearch-and-how-to&quot;&gt;Wattpad Engineering’s Using Nginx as a proxy for Elasticsearch&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Monitoring CI from your iPhone</title>
   <link href="http://localhost:4000/2014/09/27/ios-project-monitor/"/>
   <updated>2014-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/27/ios-project-monitor</id>
   <content type="html">&lt;p&gt;Ever want to receive a push notification when a commit fails CI? Well, do I have news for you.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Project Monitor will monitor your travis-ci, travis-ci pro, and semaphore builds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimroc/iOS.ProjectMonitor/master/client/ProjectMonitor/Images.xcassets/screens.imageset/screens.png&quot; alt=&quot;Project Monitor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/project-monitor/id857272990?ls=1&amp;amp;mt=8&quot;&gt;Available for free in the App Store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dimroc/iOS.ProjectMonitor&quot;&gt;And it’s open source on Github!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technologies Used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Objective C&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Parse (MBaaS)&lt;/li&gt;
  &lt;li&gt;Sidekiq&lt;/li&gt;
  &lt;li&gt;Travis CI&lt;/li&gt;
  &lt;li&gt;CocoaPods&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>NYC Building Perimeters</title>
   <link href="http://localhost:4000/2014/09/26/nyc-building-perimeters/"/>
   <updated>2014-09-26T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/26/nyc-building-perimeters</id>
   <content type="html">&lt;p&gt;I love NYC and WebGL. So I married the two by rendering NYC building perimeters with &lt;a href=&quot;http://threejs.org/&quot;&gt;ThreeJS&lt;/a&gt; using &lt;a href=&quot;https://nycopendata.socrata.com/&quot;&gt;NYC Open Data&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Starting with NYC:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimroc/nyc_building_perimeters/master/app/assets/images/icons/nyc.png&quot; alt=&quot;NYC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can zoom into a neighborhood:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dimroc/nyc_building_perimeters/raw/master/public/readme/NbcLowerEastSideManhattan.png&quot; alt=&quot;LES Buildings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Batches were broken up by neighborhood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dimroc/nyc_building_perimeters/raw/master/public/readme/buildingsInNeighborhoods.png&quot; alt=&quot;Batch by hood&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dimroc.com/nyc_building_perimeters/#/neighborhoods/lower-east-side&quot;&gt;See it for yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Three takeaways I didn’t foresee:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The heavy downloads needed to get to all the 3D json files to the browser (it’s even more than I had feared).&lt;/li&gt;
  &lt;li&gt;The large amounts of RAM needed to render the models (no fancy LOD given the zoom levels).&lt;/li&gt;
  &lt;li&gt;The poor garbage collection when toggling between neighborhoods exacerbated 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See more technical details on the &lt;a href=&quot;https://github.com/dimroc/nyc_building_perimeters&quot;&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the release of &lt;a href=&quot;http://vizicities.com/&quot;&gt;ViziCities&lt;/a&gt;, an impressive rendering of cities. Check out &lt;a href=&quot;http://vizicities.apps.rawk.es/demo.html#40.71432818342427,-73.98659111120529&quot;&gt;NYC&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NYC Neighborhood Term Frequency</title>
   <link href="http://localhost:4000/2014/09/25/hood-frequency/"/>
   <updated>2014-09-25T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/25/hood-frequency</id>
   <content type="html">&lt;p&gt;Which New York neighborhoods care the most about startups? Aggregating across ~50M tweets with Elasticsearch looking for the term &lt;em&gt;startups&lt;/em&gt; gave me an answer.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/HoodFrequency.png&quot; alt=&quot;Hood Frequency&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See results for other searches &lt;a href=&quot;http://www.newtweetcity.com/frequencies/manhattan?q=startups&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tweets as Pixels in NYC</title>
   <link href="http://localhost:4000/2014/09/24/tweets-as-pixels/"/>
   <updated>2014-09-24T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/09/24/tweets-as-pixels</id>
   <content type="html">&lt;p&gt;What do you get when you brighten a pixel every time you get a tweet’s location? That’s what &lt;a href=&quot;https://blog.twitter.com/2013/the-geography-of-tweets&quot;&gt;Miguel Rios&lt;/a&gt; asked
in his post &lt;a href=&quot;https://blog.twitter.com/2013/the-geography-of-tweets&quot;&gt;The Geography of Tweets&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here’s my very own rendering of NYC after gathering geotagged tweets in 2013:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/nyc_20140216T230944.jpg&quot; alt=&quot;Entire NYC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fascinating deductions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The gridded street blocks really pop out because of what I assume are pedestrians tweeting on the sidewalks.&lt;/li&gt;
  &lt;li&gt;A lot of people tweet when they drive. Look closely and you can even see all the main bridges (Brooklyn, Williamsburgh, etc).&lt;/li&gt;
  &lt;li&gt;The Staten Island Ferry near the bottom of the photo is an incident of tweets being sent over water.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zooming into Manhattan, we can see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/manhattan_20140217T220012.jpg&quot; alt=&quot;Manhattan Tweets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More can be see at &lt;a href=&quot;http://www.newtweetcity.com/&quot;&gt;New Tweet City&lt;/a&gt;. Check out the &lt;a href=&quot;https://github.com/dimroc/new_tweet_city&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Intro to ThreeJS... using ThreeJS</title>
   <link href="http://localhost:4000/2014/08/20/intro-to-threejs-slides/"/>
   <updated>2014-08-20T00:00:00-07:00</updated>
   <id>http://localhost:4000/2014/08/20/intro-to-threejs-slides</id>
   <content type="html">&lt;p&gt;I’m a big believer in learning by doing. So when I set out to learn ThreeJS, I did it by making &lt;a href=&quot;http://www.dimroc.com/reveal.js-threejs/&quot;&gt;this sweet slide deck&lt;/a&gt;.
Click through to check out details.&lt;/p&gt;

&lt;!--more--&gt;

&lt;canvas id=&quot;spinningCube&quot;&gt;&lt;/canvas&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var dimroc = (function() {
  return { gfx: {
    width: 320,
    height: 250
  }};
})();

var renderSpinningCube = function(canvas) {
  var scene = new THREE.Scene();

  var camera = new THREE.PerspectiveCamera( 30, dimroc.gfx.width / dimroc.gfx.height, 1, 1000 );
  camera.position.set(0, 3, 7);
  camera.lookAt( new THREE.Vector3(0,0,0));

  var scale = 2.5;
  var geometry = new THREE.BoxGeometry( scale, scale, scale );
  var material = new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true, wireframeLinewidth: 3 } );

  var mesh = new THREE.Mesh( geometry, material );
  scene.add( mesh );

  var axisHelper = new THREE.AxisHelper(50);
  scene.add( axisHelper );

  var renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true, alpha: true});
  renderer.setSize( dimroc.gfx.width, dimroc.gfx.height );

  function animate() {
    requestAnimationFrame( animate, canvas );
    mesh.rotation.y += 0.008;
    renderer.render( scene, camera );
  }

  animate();
}

renderSpinningCube($(&apos;#spinningCube&apos;)[0]);

&lt;/script&gt;

&lt;p&gt;Using &lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot;&gt;reveal.js&lt;/a&gt;, an html framework for presentations, I added self-contained javascript ThreeJS samples on each slide to
demonstrate a particular feature of ThreeJS.&lt;/p&gt;

&lt;p&gt;Here is the standard spinning cube example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spinning_cube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PerspectiveCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CubeGeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdddddd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebGLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;antialias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By tagging slides with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data-sample&lt;/code&gt; attribute, the corresponding javascript example kicks in and does its WebGL magic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sample=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spinning_cube&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display:inline&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See all the ThreeJS javascript samples &lt;a href=&quot;https://github.com/dimroc/reveal.js-threejs/tree/gh-pages/js/samples&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the actual &lt;a href=&quot;http://www.dimroc.com/reveal.js-threejs/#/&quot;&gt;Intro to ThreeJS Slideshow&lt;/a&gt;. &lt;a href=&quot;https://github.com/dimroc/reveal.js-threejs&quot;&gt;Source Code&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
